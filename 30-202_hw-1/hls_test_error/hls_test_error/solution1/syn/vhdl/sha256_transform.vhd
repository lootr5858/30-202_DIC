-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_transform is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_transform_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    data_transform_ce0 : OUT STD_LOGIC;
    data_transform_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_transform_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    data_transform_ce1 : OUT STD_LOGIC;
    data_transform_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_state_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_0_o_ap_vld : OUT STD_LOGIC;
    ctx_state_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_1_o_ap_vld : OUT STD_LOGIC;
    ctx_state_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_2_o_ap_vld : OUT STD_LOGIC;
    ctx_state_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_3_o_ap_vld : OUT STD_LOGIC;
    ctx_state_4_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_4_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_4_o_ap_vld : OUT STD_LOGIC;
    ctx_state_5_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_5_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_5_o_ap_vld : OUT STD_LOGIC;
    ctx_state_6_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_6_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_6_o_ap_vld : OUT STD_LOGIC;
    ctx_state_7_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_7_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctx_state_7_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sha256_transform is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv7_79 : STD_LOGIC_VECTOR (6 downto 0) := "1111001";
    constant ap_const_lv7_71 : STD_LOGIC_VECTOR (6 downto 0) := "1110001";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_ce0 : STD_LOGIC;
    signal k_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_reg_1042 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_9_fu_387_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_1050 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_398_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_reg_1060 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_fu_413_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_1071 : STD_LOGIC_VECTOR (6 downto 0);
    signal data_transform_load_reg_1076 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal data_transform_load_1_reg_1081 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_cast_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_cast_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_reg_1114 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_1120 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_reg_1132 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_reg_1138 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_load_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal m_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_load_1_reg_1171 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_536_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_1186 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_4_fu_706_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_reg_1199 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_28_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_944_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal e_1_fu_1027_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal a_1_fu_1036_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_ce0 : STD_LOGIC;
    signal m_we0 : STD_LOGIC;
    signal m_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_ce1 : STD_LOGIC;
    signal m_we1 : STD_LOGIC;
    signal i_reg_247 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_reg_258 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_269 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal h1_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_1_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_1_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_1_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal d1_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_1_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_366 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast4_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_cast_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast_fu_694_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_850_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_861_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_883_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_894_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_916_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_402_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_419_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_429_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_460_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_471_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_514_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_525_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_551_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_542_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_fu_571_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_6_fu_562_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_12_fu_582_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_13_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_554_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_617_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_607_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_38_fu_639_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_fu_629_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_23_fu_651_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_24_fu_661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_643_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_621_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_722_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_fu_712_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_44_fu_744_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_fu_734_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_52_fu_766_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_43_fu_756_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_39_fu_726_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_748_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_778_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_770_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_826_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_832_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_838_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_938_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_959_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_51_fu_949_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_58_fu_981_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_54_fu_971_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_65_fu_1003_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_57_fu_993_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_53_fu_963_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_985_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_fu_1015_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_1007_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component sha256_transform_k IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_transform_m IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    k_U : component sha256_transform_k
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_address0,
        ce0 => k_ce0,
        q0 => k_q0);

    m_U : component sha256_transform_m
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_address0,
        ce0 => m_ce0,
        we0 => m_we0,
        d0 => m_d0,
        q0 => m_q0,
        address1 => m_address1,
        ce1 => m_ce1,
        we1 => m_we1,
        d1 => tmp_27_reg_1191,
        q1 => m_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    b_1_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                b_1_reg_355 <= a_1_fu_1036_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_454_p2)))) then 
                b_1_reg_355 <= ctx_state_0_i;
            end if; 
        end if;
    end process;

    c_1_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                c_1_reg_344 <= b_1_reg_355;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_454_p2)))) then 
                c_1_reg_344 <= ctx_state_1_i;
            end if; 
        end if;
    end process;

    d1_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                d1_reg_323 <= d_1_reg_333;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_454_p2)))) then 
                d1_reg_323 <= ctx_state_3_i;
            end if; 
        end if;
    end process;

    d_1_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                d_1_reg_333 <= c_1_reg_344;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_454_p2)))) then 
                d_1_reg_333 <= ctx_state_2_i;
            end if; 
        end if;
    end process;

    f_1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                f_1_reg_312 <= e_1_fu_1027_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_454_p2)))) then 
                f_1_reg_312 <= ctx_state_4_i;
            end if; 
        end if;
    end process;

    g_1_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                g_1_reg_301 <= f_1_reg_312;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_454_p2)))) then 
                g_1_reg_301 <= ctx_state_5_i;
            end if; 
        end if;
    end process;

    h1_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                h1_reg_281 <= h_1_reg_290;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_454_p2)))) then 
                h1_reg_281 <= ctx_state_7_i;
            end if; 
        end if;
    end process;

    h_1_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                h_1_reg_290 <= g_1_reg_301;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_454_p2)))) then 
                h_1_reg_290 <= ctx_state_6_i;
            end if; 
        end if;
    end process;

    i_1_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_fu_381_p2 = ap_const_lv1_0)))) then 
                i_1_reg_269 <= ap_const_lv7_10;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                i_1_reg_269 <= i_3_reg_1186;
            end if; 
        end if;
    end process;

    i_2_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
                i_2_reg_366 <= i_4_reg_1199;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_454_p2)))) then 
                i_2_reg_366 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
                i_reg_247 <= tmp_9_reg_1050;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_247 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
                j_reg_258 <= j_1_reg_1071;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_258 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_454_p2)))) then
                a_reg_1114 <= ctx_state_0_i;
                b_reg_1120 <= ctx_state_1_i;
                c_reg_1126 <= ctx_state_2_i;
                d_reg_1132 <= ctx_state_3_i;
                e_reg_1138 <= ctx_state_4_i;
                f_reg_1144 <= ctx_state_5_i;
                g_reg_1150 <= ctx_state_6_i;
                h_reg_1156 <= ctx_state_7_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                data_transform_load_1_reg_1081 <= data_transform_q1;
                data_transform_load_reg_1076 <= data_transform_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                    i_1_cast_reg_1096(6 downto 0) <= i_1_cast_fu_450_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                i_3_reg_1186 <= i_3_fu_536_p2;
                m_load_1_reg_1171 <= m_q1;
                m_load_reg_1162 <= m_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                i_4_reg_1199 <= i_4_fu_706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                    i_cast_reg_1042(4 downto 0) <= i_cast_fu_377_p1(4 downto 0);
                tmp_9_reg_1050 <= tmp_9_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_fu_381_p2 = ap_const_lv1_0))) then
                j_1_reg_1071 <= j_1_fu_413_p2;
                tmp_3_reg_1060 <= tmp_3_fu_398_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                t1_reg_1224 <= t1_fu_944_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_28_fu_700_p2))) then
                tmp8_reg_1214 <= tmp8_fu_820_p2;
                tmp_64_reg_1219 <= tmp_64_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                tmp_27_reg_1191 <= tmp_27_fu_688_p2;
            end if;
        end if;
    end process;
    i_cast_reg_1042(31 downto 5) <= "000000000000000000000000000";
    i_1_cast_reg_1096(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_381_p2, exitcond_fu_454_p2, tmp_28_fu_700_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((tmp_fu_381_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_lv1_0 = exitcond_fu_454_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state9 => 
                if (not((ap_const_lv1_0 = tmp_28_fu_700_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    a_1_fu_1036_p2 <= std_logic_vector(unsigned(tmp11_fu_1032_p2) + unsigned(tmp_60_fu_1021_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, tmp_28_fu_700_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, tmp_28_fu_700_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ctx_state_0_o_assign_proc : process(ctx_state_0_i, ap_CS_fsm_state9, tmp_28_fu_700_p2, tmp_29_fu_850_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_0_o <= tmp_29_fu_850_p2;
        else 
            ctx_state_0_o <= ctx_state_0_i;
        end if; 
    end process;


    ctx_state_0_o_ap_vld_assign_proc : process(ap_CS_fsm_state9, tmp_28_fu_700_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_0_o_ap_vld <= ap_const_logic_1;
        else 
            ctx_state_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ctx_state_1_o_assign_proc : process(ctx_state_1_i, ap_CS_fsm_state9, tmp_28_fu_700_p2, tmp_30_fu_861_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_1_o <= tmp_30_fu_861_p2;
        else 
            ctx_state_1_o <= ctx_state_1_i;
        end if; 
    end process;


    ctx_state_1_o_ap_vld_assign_proc : process(ap_CS_fsm_state9, tmp_28_fu_700_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_1_o_ap_vld <= ap_const_logic_1;
        else 
            ctx_state_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ctx_state_2_o_assign_proc : process(ctx_state_2_i, ap_CS_fsm_state9, tmp_28_fu_700_p2, tmp_31_fu_872_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_2_o <= tmp_31_fu_872_p2;
        else 
            ctx_state_2_o <= ctx_state_2_i;
        end if; 
    end process;


    ctx_state_2_o_ap_vld_assign_proc : process(ap_CS_fsm_state9, tmp_28_fu_700_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_2_o_ap_vld <= ap_const_logic_1;
        else 
            ctx_state_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ctx_state_3_o_assign_proc : process(ctx_state_3_i, ap_CS_fsm_state9, tmp_28_fu_700_p2, tmp_32_fu_883_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_3_o <= tmp_32_fu_883_p2;
        else 
            ctx_state_3_o <= ctx_state_3_i;
        end if; 
    end process;


    ctx_state_3_o_ap_vld_assign_proc : process(ap_CS_fsm_state9, tmp_28_fu_700_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_3_o_ap_vld <= ap_const_logic_1;
        else 
            ctx_state_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ctx_state_4_o_assign_proc : process(ctx_state_4_i, ap_CS_fsm_state9, tmp_28_fu_700_p2, tmp_33_fu_894_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_4_o <= tmp_33_fu_894_p2;
        else 
            ctx_state_4_o <= ctx_state_4_i;
        end if; 
    end process;


    ctx_state_4_o_ap_vld_assign_proc : process(ap_CS_fsm_state9, tmp_28_fu_700_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_4_o_ap_vld <= ap_const_logic_1;
        else 
            ctx_state_4_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ctx_state_5_o_assign_proc : process(ctx_state_5_i, ap_CS_fsm_state9, tmp_28_fu_700_p2, tmp_34_fu_905_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_5_o <= tmp_34_fu_905_p2;
        else 
            ctx_state_5_o <= ctx_state_5_i;
        end if; 
    end process;


    ctx_state_5_o_ap_vld_assign_proc : process(ap_CS_fsm_state9, tmp_28_fu_700_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_5_o_ap_vld <= ap_const_logic_1;
        else 
            ctx_state_5_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ctx_state_6_o_assign_proc : process(ctx_state_6_i, ap_CS_fsm_state9, tmp_28_fu_700_p2, tmp_35_fu_916_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_6_o <= tmp_35_fu_916_p2;
        else 
            ctx_state_6_o <= ctx_state_6_i;
        end if; 
    end process;


    ctx_state_6_o_ap_vld_assign_proc : process(ap_CS_fsm_state9, tmp_28_fu_700_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_6_o_ap_vld <= ap_const_logic_1;
        else 
            ctx_state_6_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ctx_state_7_o_assign_proc : process(ctx_state_7_i, ap_CS_fsm_state9, tmp_28_fu_700_p2, tmp_36_fu_927_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_7_o <= tmp_36_fu_927_p2;
        else 
            ctx_state_7_o <= ctx_state_7_i;
        end if; 
    end process;


    ctx_state_7_o_ap_vld_assign_proc : process(ap_CS_fsm_state9, tmp_28_fu_700_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((ap_const_lv1_0 = tmp_28_fu_700_p2)))) then 
            ctx_state_7_o_ap_vld <= ap_const_logic_1;
        else 
            ctx_state_7_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    data_transform_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, j_cast4_fu_393_p1, tmp_1_cast_fu_424_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            data_transform_address0 <= tmp_1_cast_fu_424_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            data_transform_address0 <= j_cast4_fu_393_p1(6 - 1 downto 0);
        else 
            data_transform_address0 <= "XXXXXX";
        end if; 
    end process;


    data_transform_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_8_cast_fu_408_p1, tmp_4_cast_fu_434_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            data_transform_address1 <= tmp_4_cast_fu_434_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            data_transform_address1 <= tmp_8_cast_fu_408_p1(6 - 1 downto 0);
        else 
            data_transform_address1 <= "XXXXXX";
        end if; 
    end process;


    data_transform_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            data_transform_ce0 <= ap_const_logic_1;
        else 
            data_transform_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_transform_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            data_transform_ce1 <= ap_const_logic_1;
        else 
            data_transform_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    e_1_fu_1027_p2 <= std_logic_vector(unsigned(t1_reg_1224) + unsigned(d1_reg_323));
    exitcond_fu_454_p2 <= "1" when (i_1_reg_269 = ap_const_lv7_40) else "0";
    i_1_cast_fu_450_p1 <= std_logic_vector(resize(unsigned(i_1_reg_269),32));
    i_2_cast_fu_694_p1 <= std_logic_vector(resize(unsigned(i_2_reg_366),32));
    i_3_fu_536_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(i_1_reg_269));
    i_4_fu_706_p2 <= std_logic_vector(unsigned(i_2_reg_366) + unsigned(ap_const_lv7_1));
    i_cast_fu_377_p1 <= std_logic_vector(resize(unsigned(i_reg_247),32));
    j_1_fu_413_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(j_reg_258));
    j_cast4_fu_393_p1 <= std_logic_vector(resize(unsigned(j_reg_258),32));
    k_address0 <= i_2_cast_fu_694_p1(6 - 1 downto 0);

    k_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            k_ce0 <= ap_const_logic_1;
        else 
            k_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_address0_assign_proc : process(i_cast_reg_1042, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state4, tmp_14_cast_fu_466_p1, tmp_35_cast_fu_531_p1, i_2_cast_fu_694_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            m_address0 <= i_2_cast_fu_694_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            m_address0 <= tmp_35_cast_fu_531_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            m_address0 <= tmp_14_cast_fu_466_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            m_address0 <= i_cast_reg_1042(6 - 1 downto 0);
        else 
            m_address0 <= "XXXXXX";
        end if; 
    end process;


    m_address1_assign_proc : process(i_1_cast_reg_1096, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, tmp_24_cast_fu_477_p1, tmp_25_cast_fu_520_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            m_address1 <= i_1_cast_reg_1096(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            m_address1 <= tmp_25_cast_fu_520_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            m_address1 <= tmp_24_cast_fu_477_p1(6 - 1 downto 0);
        else 
            m_address1 <= "XXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state4)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state4)))) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)))) then 
            m_ce1 <= ap_const_logic_1;
        else 
            m_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    m_d0 <= (((data_transform_load_reg_1076 & data_transform_load_1_reg_1081) & data_transform_q0) & data_transform_q1);

    m_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)))) then 
            m_we0 <= ap_const_logic_1;
        else 
            m_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state8)))) then 
            m_we1 <= ap_const_logic_1;
        else 
            m_we1 <= ap_const_logic_0;
        end if; 
    end process;

    t1_fu_944_p2 <= std_logic_vector(unsigned(tmp8_reg_1214) + unsigned(tmp9_fu_938_p2));
    tmp10_fu_1015_p2 <= (tmp_53_fu_963_p3 xor tmp_56_fu_985_p3);
    tmp11_fu_1032_p2 <= std_logic_vector(unsigned(tmp_64_reg_1219) + unsigned(t1_reg_1224));
    tmp2_fu_595_p2 <= (tmp_13_fu_591_p1 xor tmp_11_fu_574_p3);
    tmp3_fu_665_p2 <= (tmp_24_fu_661_p1 xor tmp_22_fu_643_p3);
    tmp4_fu_677_p2 <= std_logic_vector(unsigned(m_load_1_reg_1171) + unsigned(m_q0));
    tmp5_fu_682_p2 <= std_logic_vector(unsigned(tmp_14_fu_601_p2) + unsigned(tmp_25_fu_671_p2));
    tmp6_fu_778_p2 <= (tmp_39_fu_726_p3 xor tmp_42_fu_748_p3);
    tmp7_fu_814_p2 <= std_logic_vector(unsigned(tmp_46_fu_784_p2) + unsigned(tmp_50_fu_808_p2));
    tmp8_fu_820_p2 <= std_logic_vector(unsigned(tmp7_fu_814_p2) + unsigned(h1_reg_281));
    tmp9_fu_938_p2 <= std_logic_vector(unsigned(k_q0) + unsigned(m_q0));
    tmp_10_fu_551_p1 <= m_load_reg_1162(17 - 1 downto 0);
    tmp_11_fu_574_p3 <= (tmp_18_fu_571_p1 & tmp_6_fu_562_p4);
    tmp_12_fu_582_p4 <= m_load_reg_1162(31 downto 10);
    tmp_13_fu_591_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_582_p4),32));
    tmp_14_cast_fu_466_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_460_p2),32));
    tmp_14_fu_601_p2 <= (tmp2_fu_595_p2 xor tmp_5_fu_554_p3);
    tmp_15_fu_471_p2 <= std_logic_vector(signed(ap_const_lv7_79) + signed(i_1_reg_269));
    tmp_16_fu_514_p2 <= std_logic_vector(signed(ap_const_lv7_71) + signed(i_1_reg_269));
    tmp_17_fu_607_p4 <= m_q1(31 downto 7);
    tmp_18_fu_571_p1 <= m_load_reg_1162(19 - 1 downto 0);
    tmp_19_fu_621_p3 <= (tmp_21_fu_617_p1 & tmp_17_fu_607_p4);
    tmp_1_cast_fu_424_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_419_p2),32));
    tmp_1_fu_419_p2 <= (tmp_3_reg_1060 or ap_const_lv6_2);
    tmp_20_fu_629_p4 <= m_q1(31 downto 18);
    tmp_21_fu_617_p1 <= m_q1(7 - 1 downto 0);
    tmp_22_fu_643_p3 <= (tmp_38_fu_639_p1 & tmp_20_fu_629_p4);
    tmp_23_fu_651_p4 <= m_q1(31 downto 3);
    tmp_24_cast_fu_477_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_471_p2),32));
    tmp_24_fu_661_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_651_p4),32));
    tmp_25_cast_fu_520_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_514_p2),32));
    tmp_25_fu_671_p2 <= (tmp3_fu_665_p2 xor tmp_19_fu_621_p3);
    tmp_26_fu_525_p2 <= std_logic_vector(signed(ap_const_lv7_70) + signed(i_1_reg_269));
    tmp_27_fu_688_p2 <= std_logic_vector(unsigned(tmp5_fu_682_p2) + unsigned(tmp4_fu_677_p2));
    tmp_28_fu_700_p2 <= "1" when (i_2_reg_366 = ap_const_lv7_40) else "0";
    tmp_29_fu_850_p2 <= std_logic_vector(unsigned(a_reg_1114) + unsigned(b_1_reg_355));
    tmp_2_fu_542_p4 <= m_load_reg_1162(31 downto 17);
    tmp_30_fu_861_p2 <= std_logic_vector(unsigned(b_reg_1120) + unsigned(c_1_reg_344));
    tmp_31_fu_872_p2 <= std_logic_vector(unsigned(c_reg_1126) + unsigned(d_1_reg_333));
    tmp_32_fu_883_p2 <= std_logic_vector(unsigned(d_reg_1132) + unsigned(d1_reg_323));
    tmp_33_fu_894_p2 <= std_logic_vector(unsigned(e_reg_1138) + unsigned(f_1_reg_312));
    tmp_34_fu_905_p2 <= std_logic_vector(unsigned(f_reg_1144) + unsigned(g_1_reg_301));
    tmp_35_cast_fu_531_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_525_p2),32));
    tmp_35_fu_916_p2 <= std_logic_vector(unsigned(g_reg_1150) + unsigned(h_1_reg_290));
    tmp_36_fu_927_p2 <= std_logic_vector(unsigned(h_reg_1156) + unsigned(h1_reg_281));
    tmp_37_fu_712_p4 <= f_1_reg_312(31 downto 6);
    tmp_38_fu_639_p1 <= m_q1(18 - 1 downto 0);
    tmp_39_fu_726_p3 <= (tmp_41_fu_722_p1 & tmp_37_fu_712_p4);
    tmp_3_fu_398_p1 <= j_reg_258(6 - 1 downto 0);
    tmp_40_fu_734_p4 <= f_1_reg_312(31 downto 11);
    tmp_41_fu_722_p1 <= f_1_reg_312(6 - 1 downto 0);
    tmp_42_fu_748_p3 <= (tmp_44_fu_744_p1 & tmp_40_fu_734_p4);
    tmp_43_fu_756_p4 <= f_1_reg_312(31 downto 25);
    tmp_44_fu_744_p1 <= f_1_reg_312(11 - 1 downto 0);
    tmp_45_fu_770_p3 <= (tmp_52_fu_766_p1 & tmp_43_fu_756_p4);
    tmp_46_fu_784_p2 <= (tmp6_fu_778_p2 xor tmp_45_fu_770_p3);
    tmp_47_fu_790_p2 <= (f_1_reg_312 and g_1_reg_301);
    tmp_48_fu_796_p2 <= (f_1_reg_312 xor ap_const_lv32_FFFFFFFF);
    tmp_49_fu_802_p2 <= (h_1_reg_290 and tmp_48_fu_796_p2);
    tmp_4_cast_fu_434_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_429_p2),32));
    tmp_4_fu_429_p2 <= (tmp_3_reg_1060 or ap_const_lv6_3);
    tmp_50_fu_808_p2 <= (tmp_47_fu_790_p2 xor tmp_49_fu_802_p2);
    tmp_51_fu_949_p4 <= b_1_reg_355(31 downto 2);
    tmp_52_fu_766_p1 <= f_1_reg_312(25 - 1 downto 0);
    tmp_53_fu_963_p3 <= (tmp_55_fu_959_p1 & tmp_51_fu_949_p4);
    tmp_54_fu_971_p4 <= b_1_reg_355(31 downto 13);
    tmp_55_fu_959_p1 <= b_1_reg_355(2 - 1 downto 0);
    tmp_56_fu_985_p3 <= (tmp_58_fu_981_p1 & tmp_54_fu_971_p4);
    tmp_57_fu_993_p4 <= b_1_reg_355(31 downto 22);
    tmp_58_fu_981_p1 <= b_1_reg_355(13 - 1 downto 0);
    tmp_59_fu_1007_p3 <= (tmp_65_fu_1003_p1 & tmp_57_fu_993_p4);
    tmp_5_fu_554_p3 <= (tmp_10_fu_551_p1 & tmp_2_fu_542_p4);
    tmp_60_fu_1021_p2 <= (tmp10_fu_1015_p2 xor tmp_59_fu_1007_p3);
    tmp_61_fu_826_p2 <= (c_1_reg_344 xor d_1_reg_333);
    tmp_62_fu_832_p2 <= (b_1_reg_355 and tmp_61_fu_826_p2);
    tmp_63_fu_838_p2 <= (c_1_reg_344 and d_1_reg_333);
    tmp_64_fu_844_p2 <= (tmp_62_fu_832_p2 xor tmp_63_fu_838_p2);
    tmp_65_fu_1003_p1 <= b_1_reg_355(22 - 1 downto 0);
    tmp_6_fu_562_p4 <= m_load_reg_1162(31 downto 19);
    tmp_8_cast_fu_408_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_402_p2),32));
    tmp_8_fu_402_p2 <= (tmp_3_fu_398_p1 or ap_const_lv6_1);
    tmp_9_fu_387_p2 <= std_logic_vector(unsigned(i_reg_247) + unsigned(ap_const_lv5_1));
    tmp_fu_381_p2 <= "1" when (i_reg_247 = ap_const_lv5_10) else "0";
    tmp_s_fu_460_p2 <= std_logic_vector(signed(ap_const_lv7_7E) + signed(i_1_reg_269));
end behav;
