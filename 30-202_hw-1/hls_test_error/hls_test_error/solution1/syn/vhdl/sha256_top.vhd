-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    hash_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hash_ce0 : OUT STD_LOGIC;
    hash_we0 : OUT STD_LOGIC;
    hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    hash_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hash_ce1 : OUT STD_LOGIC;
    hash_we1 : OUT STD_LOGIC;
    hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256_top,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.120000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=2177,HLS_SYN_LUT=5624}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6A09E667 : STD_LOGIC_VECTOR (31 downto 0) := "01101010000010011110011001100111";
    constant ap_const_lv32_BB67AE85 : STD_LOGIC_VECTOR (31 downto 0) := "10111011011001111010111010000101";
    constant ap_const_lv32_3C6EF372 : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101110010";
    constant ap_const_lv32_A54FF53A : STD_LOGIC_VECTOR (31 downto 0) := "10100101010011111111010100111010";
    constant ap_const_lv32_510E527F : STD_LOGIC_VECTOR (31 downto 0) := "01010001000011100101001001111111";
    constant ap_const_lv32_9B05688C : STD_LOGIC_VECTOR (31 downto 0) := "10011011000001010110100010001100";
    constant ap_const_lv32_1F83D9AB : STD_LOGIC_VECTOR (31 downto 0) := "00011111100000111101100110101011";
    constant ap_const_lv32_5BE0CD19 : STD_LOGIC_VECTOR (31 downto 0) := "01011011111000001100110100011001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_FFFFFDFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctx_datalen : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ctx_bitlen_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ctx_bitlen_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ctx_state_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ctx_state_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ctx_state_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ctx_state_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ctx_state_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ctx_state_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ctx_state_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ctx_state_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ctx_in_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ctx_in_data_ce0 : STD_LOGIC;
    signal ctx_in_data_we0 : STD_LOGIC;
    signal ctx_in_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_in_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_in_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ctx_in_data_ce1 : STD_LOGIC;
    signal ctx_in_data_we1 : STD_LOGIC;
    signal ctx_in_data_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_245_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_315 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_i_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_sha256_final_fu_112_ap_start : STD_LOGIC;
    signal grp_sha256_final_fu_112_ap_done : STD_LOGIC;
    signal grp_sha256_final_fu_112_ap_idle : STD_LOGIC;
    signal grp_sha256_final_fu_112_ap_ready : STD_LOGIC;
    signal grp_sha256_final_fu_112_final_hash_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sha256_final_fu_112_final_hash_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_112_final_hash_we0 : STD_LOGIC;
    signal grp_sha256_final_fu_112_final_hash_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_112_final_hash_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sha256_final_fu_112_final_hash_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_112_final_hash_we1 : STD_LOGIC;
    signal grp_sha256_final_fu_112_final_hash_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_112_ctx_in_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_112_ctx_in_data_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_in_data_we0 : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_in_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_112_ctx_in_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_112_ctx_in_data_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_in_data_we1 : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_in_data_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_112_ctx_state_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_112_ctx_state_0_o_ap_vld : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_state_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_112_ctx_state_1_o_ap_vld : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_state_2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_112_ctx_state_2_o_ap_vld : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_state_3_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_112_ctx_state_3_o_ap_vld : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_state_4_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_112_ctx_state_4_o_ap_vld : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_state_5_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_112_ctx_state_5_o_ap_vld : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_state_6_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_112_ctx_state_6_o_ap_vld : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_state_7_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_112_ctx_state_7_o_ap_vld : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_bitlen_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_112_ctx_bitlen_0_o_ap_vld : STD_LOGIC;
    signal grp_sha256_final_fu_112_ctx_bitlen_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_112_ctx_bitlen_1_o_ap_vld : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ap_start : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ap_done : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ap_idle : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ap_ready : STD_LOGIC;
    signal grp_sha256_transform_fu_144_data_transform_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_144_data_transform_ce0 : STD_LOGIC;
    signal grp_sha256_transform_fu_144_data_transform_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_144_data_transform_ce1 : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ctx_state_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_144_ctx_state_0_o_ap_vld : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ctx_state_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_144_ctx_state_1_o_ap_vld : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ctx_state_2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_144_ctx_state_2_o_ap_vld : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ctx_state_3_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_144_ctx_state_3_o_ap_vld : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ctx_state_4_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_144_ctx_state_4_o_ap_vld : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ctx_state_5_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_144_ctx_state_5_o_ap_vld : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ctx_state_6_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_144_ctx_state_6_o_ap_vld : STD_LOGIC;
    signal grp_sha256_transform_fu_144_ctx_state_7_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_144_ctx_state_7_o_ap_vld : STD_LOGIC;
    signal i_i_reg_101 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_reg_grp_sha256_final_fu_112_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_reg_grp_sha256_transform_fu_144_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_i_cast1_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_datalen_assign_i_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component sha256_final IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        final_hash_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        final_hash_ce0 : OUT STD_LOGIC;
        final_hash_we0 : OUT STD_LOGIC;
        final_hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        final_hash_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        final_hash_ce1 : OUT STD_LOGIC;
        final_hash_we1 : OUT STD_LOGIC;
        final_hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_datalen : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_in_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_in_data_ce0 : OUT STD_LOGIC;
        ctx_in_data_we0 : OUT STD_LOGIC;
        ctx_in_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_in_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_in_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_in_data_ce1 : OUT STD_LOGIC;
        ctx_in_data_we1 : OUT STD_LOGIC;
        ctx_in_data_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_in_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_state_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_0_o_ap_vld : OUT STD_LOGIC;
        ctx_state_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_1_o_ap_vld : OUT STD_LOGIC;
        ctx_state_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_2_o_ap_vld : OUT STD_LOGIC;
        ctx_state_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_3_o_ap_vld : OUT STD_LOGIC;
        ctx_state_4_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_4_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_4_o_ap_vld : OUT STD_LOGIC;
        ctx_state_5_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_5_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_5_o_ap_vld : OUT STD_LOGIC;
        ctx_state_6_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_6_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_6_o_ap_vld : OUT STD_LOGIC;
        ctx_state_7_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_7_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_7_o_ap_vld : OUT STD_LOGIC;
        ctx_bitlen_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_bitlen_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_bitlen_0_o_ap_vld : OUT STD_LOGIC;
        ctx_bitlen_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_bitlen_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_bitlen_1_o_ap_vld : OUT STD_LOGIC );
    end component;


    component sha256_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_transform_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_transform_ce0 : OUT STD_LOGIC;
        data_transform_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_transform_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_transform_ce1 : OUT STD_LOGIC;
        data_transform_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_state_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_0_o_ap_vld : OUT STD_LOGIC;
        ctx_state_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_1_o_ap_vld : OUT STD_LOGIC;
        ctx_state_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_2_o_ap_vld : OUT STD_LOGIC;
        ctx_state_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_3_o_ap_vld : OUT STD_LOGIC;
        ctx_state_4_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_4_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_4_o_ap_vld : OUT STD_LOGIC;
        ctx_state_5_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_5_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_5_o_ap_vld : OUT STD_LOGIC;
        ctx_state_6_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_6_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_6_o_ap_vld : OUT STD_LOGIC;
        ctx_state_7_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_7_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_7_o_ap_vld : OUT STD_LOGIC );
    end component;


    component sha256_top_ctx_inbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ctx_in_data_U : component sha256_top_ctx_inbkb
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ctx_in_data_address0,
        ce0 => ctx_in_data_ce0,
        we0 => ctx_in_data_we0,
        d0 => ctx_in_data_d0,
        q0 => ctx_in_data_q0,
        address1 => ctx_in_data_address1,
        ce1 => ctx_in_data_ce1,
        we1 => ctx_in_data_we1,
        d1 => grp_sha256_final_fu_112_ctx_in_data_d1,
        q1 => ctx_in_data_q1);

    grp_sha256_final_fu_112 : component sha256_final
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_final_fu_112_ap_start,
        ap_done => grp_sha256_final_fu_112_ap_done,
        ap_idle => grp_sha256_final_fu_112_ap_idle,
        ap_ready => grp_sha256_final_fu_112_ap_ready,
        final_hash_address0 => grp_sha256_final_fu_112_final_hash_address0,
        final_hash_ce0 => grp_sha256_final_fu_112_final_hash_ce0,
        final_hash_we0 => grp_sha256_final_fu_112_final_hash_we0,
        final_hash_d0 => grp_sha256_final_fu_112_final_hash_d0,
        final_hash_address1 => grp_sha256_final_fu_112_final_hash_address1,
        final_hash_ce1 => grp_sha256_final_fu_112_final_hash_ce1,
        final_hash_we1 => grp_sha256_final_fu_112_final_hash_we1,
        final_hash_d1 => grp_sha256_final_fu_112_final_hash_d1,
        ctx_datalen => ctx_datalen,
        ctx_in_data_address0 => grp_sha256_final_fu_112_ctx_in_data_address0,
        ctx_in_data_ce0 => grp_sha256_final_fu_112_ctx_in_data_ce0,
        ctx_in_data_we0 => grp_sha256_final_fu_112_ctx_in_data_we0,
        ctx_in_data_d0 => grp_sha256_final_fu_112_ctx_in_data_d0,
        ctx_in_data_q0 => ctx_in_data_q0,
        ctx_in_data_address1 => grp_sha256_final_fu_112_ctx_in_data_address1,
        ctx_in_data_ce1 => grp_sha256_final_fu_112_ctx_in_data_ce1,
        ctx_in_data_we1 => grp_sha256_final_fu_112_ctx_in_data_we1,
        ctx_in_data_d1 => grp_sha256_final_fu_112_ctx_in_data_d1,
        ctx_in_data_q1 => ctx_in_data_q1,
        ctx_state_0_i => ctx_state_0,
        ctx_state_0_o => grp_sha256_final_fu_112_ctx_state_0_o,
        ctx_state_0_o_ap_vld => grp_sha256_final_fu_112_ctx_state_0_o_ap_vld,
        ctx_state_1_i => ctx_state_1,
        ctx_state_1_o => grp_sha256_final_fu_112_ctx_state_1_o,
        ctx_state_1_o_ap_vld => grp_sha256_final_fu_112_ctx_state_1_o_ap_vld,
        ctx_state_2_i => ctx_state_2,
        ctx_state_2_o => grp_sha256_final_fu_112_ctx_state_2_o,
        ctx_state_2_o_ap_vld => grp_sha256_final_fu_112_ctx_state_2_o_ap_vld,
        ctx_state_3_i => ctx_state_3,
        ctx_state_3_o => grp_sha256_final_fu_112_ctx_state_3_o,
        ctx_state_3_o_ap_vld => grp_sha256_final_fu_112_ctx_state_3_o_ap_vld,
        ctx_state_4_i => ctx_state_4,
        ctx_state_4_o => grp_sha256_final_fu_112_ctx_state_4_o,
        ctx_state_4_o_ap_vld => grp_sha256_final_fu_112_ctx_state_4_o_ap_vld,
        ctx_state_5_i => ctx_state_5,
        ctx_state_5_o => grp_sha256_final_fu_112_ctx_state_5_o,
        ctx_state_5_o_ap_vld => grp_sha256_final_fu_112_ctx_state_5_o_ap_vld,
        ctx_state_6_i => ctx_state_6,
        ctx_state_6_o => grp_sha256_final_fu_112_ctx_state_6_o,
        ctx_state_6_o_ap_vld => grp_sha256_final_fu_112_ctx_state_6_o_ap_vld,
        ctx_state_7_i => ctx_state_7,
        ctx_state_7_o => grp_sha256_final_fu_112_ctx_state_7_o,
        ctx_state_7_o_ap_vld => grp_sha256_final_fu_112_ctx_state_7_o_ap_vld,
        ctx_bitlen_0_i => ctx_bitlen_0,
        ctx_bitlen_0_o => grp_sha256_final_fu_112_ctx_bitlen_0_o,
        ctx_bitlen_0_o_ap_vld => grp_sha256_final_fu_112_ctx_bitlen_0_o_ap_vld,
        ctx_bitlen_1_i => ctx_bitlen_1,
        ctx_bitlen_1_o => grp_sha256_final_fu_112_ctx_bitlen_1_o,
        ctx_bitlen_1_o_ap_vld => grp_sha256_final_fu_112_ctx_bitlen_1_o_ap_vld);

    grp_sha256_transform_fu_144 : component sha256_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_transform_fu_144_ap_start,
        ap_done => grp_sha256_transform_fu_144_ap_done,
        ap_idle => grp_sha256_transform_fu_144_ap_idle,
        ap_ready => grp_sha256_transform_fu_144_ap_ready,
        data_transform_address0 => grp_sha256_transform_fu_144_data_transform_address0,
        data_transform_ce0 => grp_sha256_transform_fu_144_data_transform_ce0,
        data_transform_q0 => ctx_in_data_q0,
        data_transform_address1 => grp_sha256_transform_fu_144_data_transform_address1,
        data_transform_ce1 => grp_sha256_transform_fu_144_data_transform_ce1,
        data_transform_q1 => ctx_in_data_q1,
        ctx_state_0_i => ctx_state_0,
        ctx_state_0_o => grp_sha256_transform_fu_144_ctx_state_0_o,
        ctx_state_0_o_ap_vld => grp_sha256_transform_fu_144_ctx_state_0_o_ap_vld,
        ctx_state_1_i => ctx_state_1,
        ctx_state_1_o => grp_sha256_transform_fu_144_ctx_state_1_o,
        ctx_state_1_o_ap_vld => grp_sha256_transform_fu_144_ctx_state_1_o_ap_vld,
        ctx_state_2_i => ctx_state_2,
        ctx_state_2_o => grp_sha256_transform_fu_144_ctx_state_2_o,
        ctx_state_2_o_ap_vld => grp_sha256_transform_fu_144_ctx_state_2_o_ap_vld,
        ctx_state_3_i => ctx_state_3,
        ctx_state_3_o => grp_sha256_transform_fu_144_ctx_state_3_o,
        ctx_state_3_o_ap_vld => grp_sha256_transform_fu_144_ctx_state_3_o_ap_vld,
        ctx_state_4_i => ctx_state_4,
        ctx_state_4_o => grp_sha256_transform_fu_144_ctx_state_4_o,
        ctx_state_4_o_ap_vld => grp_sha256_transform_fu_144_ctx_state_4_o_ap_vld,
        ctx_state_5_i => ctx_state_5,
        ctx_state_5_o => grp_sha256_transform_fu_144_ctx_state_5_o,
        ctx_state_5_o_ap_vld => grp_sha256_transform_fu_144_ctx_state_5_o_ap_vld,
        ctx_state_6_i => ctx_state_6,
        ctx_state_6_o => grp_sha256_transform_fu_144_ctx_state_6_o,
        ctx_state_6_o_ap_vld => grp_sha256_transform_fu_144_ctx_state_6_o_ap_vld,
        ctx_state_7_i => ctx_state_7,
        ctx_state_7_o => grp_sha256_transform_fu_144_ctx_state_7_o,
        ctx_state_7_o_ap_vld => grp_sha256_transform_fu_144_ctx_state_7_o_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_sha256_final_fu_112_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_sha256_final_fu_112_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond_i_fu_239_p2 = ap_const_lv1_0)))) then 
                    ap_reg_grp_sha256_final_fu_112_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha256_final_fu_112_ap_ready)) then 
                    ap_reg_grp_sha256_final_fu_112_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha256_transform_fu_144_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_sha256_transform_fu_144_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
                    ap_reg_grp_sha256_transform_fu_144_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha256_transform_fu_144_ap_ready)) then 
                    ap_reg_grp_sha256_transform_fu_144_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ctx_bitlen_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)) and not((not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_0 = grp_sha256_transform_fu_144_ap_done))))) then 
                ctx_bitlen_0 <= tmp_4_i_fu_300_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                ctx_bitlen_0 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha256_final_fu_112_ctx_bitlen_0_o_ap_vld))) then 
                ctx_bitlen_0 <= grp_sha256_final_fu_112_ctx_bitlen_0_o;
            end if; 
        end if;
    end process;

    ctx_bitlen_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)) and not((not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_0 = grp_sha256_transform_fu_144_ap_done))) and not((ap_const_lv1_0 = tmp_2_i_fu_278_p2)))) then 
                ctx_bitlen_1 <= tmp_3_i_fu_288_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                ctx_bitlen_1 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha256_final_fu_112_ctx_bitlen_1_o_ap_vld))) then 
                ctx_bitlen_1 <= grp_sha256_final_fu_112_ctx_bitlen_1_o;
            end if; 
        end if;
    end process;

    ctx_datalen_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                ctx_datalen <= ctx_datalen_assign_i_fu_256_p2;
            elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)) and not((not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_0 = grp_sha256_transform_fu_144_ap_done)))))) then 
                ctx_datalen <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ctx_state_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                ctx_state_0 <= ap_const_lv32_6A09E667;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_1 = grp_sha256_transform_fu_144_ctx_state_0_o_ap_vld))) then 
                ctx_state_0 <= grp_sha256_transform_fu_144_ctx_state_0_o;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha256_final_fu_112_ctx_state_0_o_ap_vld))) then 
                ctx_state_0 <= grp_sha256_final_fu_112_ctx_state_0_o;
            end if; 
        end if;
    end process;

    ctx_state_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                ctx_state_1 <= ap_const_lv32_BB67AE85;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_1 = grp_sha256_transform_fu_144_ctx_state_1_o_ap_vld))) then 
                ctx_state_1 <= grp_sha256_transform_fu_144_ctx_state_1_o;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha256_final_fu_112_ctx_state_1_o_ap_vld))) then 
                ctx_state_1 <= grp_sha256_final_fu_112_ctx_state_1_o;
            end if; 
        end if;
    end process;

    ctx_state_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                ctx_state_2 <= ap_const_lv32_3C6EF372;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_1 = grp_sha256_transform_fu_144_ctx_state_2_o_ap_vld))) then 
                ctx_state_2 <= grp_sha256_transform_fu_144_ctx_state_2_o;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha256_final_fu_112_ctx_state_2_o_ap_vld))) then 
                ctx_state_2 <= grp_sha256_final_fu_112_ctx_state_2_o;
            end if; 
        end if;
    end process;

    ctx_state_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                ctx_state_3 <= ap_const_lv32_A54FF53A;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_1 = grp_sha256_transform_fu_144_ctx_state_3_o_ap_vld))) then 
                ctx_state_3 <= grp_sha256_transform_fu_144_ctx_state_3_o;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha256_final_fu_112_ctx_state_3_o_ap_vld))) then 
                ctx_state_3 <= grp_sha256_final_fu_112_ctx_state_3_o;
            end if; 
        end if;
    end process;

    ctx_state_4_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                ctx_state_4 <= ap_const_lv32_510E527F;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_1 = grp_sha256_transform_fu_144_ctx_state_4_o_ap_vld))) then 
                ctx_state_4 <= grp_sha256_transform_fu_144_ctx_state_4_o;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha256_final_fu_112_ctx_state_4_o_ap_vld))) then 
                ctx_state_4 <= grp_sha256_final_fu_112_ctx_state_4_o;
            end if; 
        end if;
    end process;

    ctx_state_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                ctx_state_5 <= ap_const_lv32_9B05688C;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_1 = grp_sha256_transform_fu_144_ctx_state_5_o_ap_vld))) then 
                ctx_state_5 <= grp_sha256_transform_fu_144_ctx_state_5_o;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha256_final_fu_112_ctx_state_5_o_ap_vld))) then 
                ctx_state_5 <= grp_sha256_final_fu_112_ctx_state_5_o;
            end if; 
        end if;
    end process;

    ctx_state_6_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                ctx_state_6 <= ap_const_lv32_1F83D9AB;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_1 = grp_sha256_transform_fu_144_ctx_state_6_o_ap_vld))) then 
                ctx_state_6 <= grp_sha256_transform_fu_144_ctx_state_6_o;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha256_final_fu_112_ctx_state_6_o_ap_vld))) then 
                ctx_state_6 <= grp_sha256_final_fu_112_ctx_state_6_o;
            end if; 
        end if;
    end process;

    ctx_state_7_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                ctx_state_7 <= ap_const_lv32_5BE0CD19;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_1 = grp_sha256_transform_fu_144_ctx_state_7_o_ap_vld))) then 
                ctx_state_7 <= grp_sha256_transform_fu_144_ctx_state_7_o;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha256_final_fu_112_ctx_state_7_o_ap_vld))) then 
                ctx_state_7 <= grp_sha256_final_fu_112_ctx_state_7_o;
            end if; 
        end if;
    end process;

    i_i_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_0 = grp_sha256_transform_fu_144_ap_done))))) then 
                i_i_reg_101 <= i_reg_315;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_i_reg_101 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_reg_315 <= i_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                tmp_1_i_reg_325 <= tmp_1_i_fu_268_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_i_fu_239_p2, tmp_1_i_fu_268_p2, tmp_1_i_reg_325, grp_sha256_final_fu_112_ap_done, grp_sha256_transform_fu_144_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond_i_fu_239_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((ap_const_lv1_0 = tmp_1_i_fu_268_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (not((not((ap_const_lv1_0 = tmp_1_i_reg_325)) and (ap_const_logic_0 = grp_sha256_transform_fu_144_ap_done)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (not((ap_const_logic_0 = grp_sha256_final_fu_112_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);

    ap_done_assign_proc : process(grp_sha256_final_fu_112_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_logic_0 = grp_sha256_final_fu_112_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_sha256_final_fu_112_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_logic_0 = grp_sha256_final_fu_112_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ctx_datalen_assign_i_fu_256_p2 <= std_logic_vector(unsigned(ctx_datalen) + unsigned(ap_const_lv32_1));

    ctx_in_data_address0_assign_proc : process(ctx_datalen, tmp_1_i_reg_325, ap_CS_fsm_state3, grp_sha256_final_fu_112_ctx_in_data_address0, grp_sha256_transform_fu_144_data_transform_address0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            ctx_in_data_address0 <= ctx_datalen(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)))) then 
            ctx_in_data_address0 <= grp_sha256_transform_fu_144_data_transform_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            ctx_in_data_address0 <= grp_sha256_final_fu_112_ctx_in_data_address0;
        else 
            ctx_in_data_address0 <= "XXXXXX";
        end if; 
    end process;


    ctx_in_data_address1_assign_proc : process(tmp_1_i_reg_325, grp_sha256_final_fu_112_ctx_in_data_address1, grp_sha256_transform_fu_144_data_transform_address1, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)))) then 
            ctx_in_data_address1 <= grp_sha256_transform_fu_144_data_transform_address1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            ctx_in_data_address1 <= grp_sha256_final_fu_112_ctx_in_data_address1;
        else 
            ctx_in_data_address1 <= "XXXXXX";
        end if; 
    end process;


    ctx_in_data_ce0_assign_proc : process(tmp_1_i_reg_325, ap_CS_fsm_state3, grp_sha256_final_fu_112_ctx_in_data_ce0, grp_sha256_transform_fu_144_data_transform_ce0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            ctx_in_data_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)))) then 
            ctx_in_data_ce0 <= grp_sha256_transform_fu_144_data_transform_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            ctx_in_data_ce0 <= grp_sha256_final_fu_112_ctx_in_data_ce0;
        else 
            ctx_in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_in_data_ce1_assign_proc : process(tmp_1_i_reg_325, grp_sha256_final_fu_112_ctx_in_data_ce1, grp_sha256_transform_fu_144_data_transform_ce1, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = tmp_1_i_reg_325)))) then 
            ctx_in_data_ce1 <= grp_sha256_transform_fu_144_data_transform_ce1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            ctx_in_data_ce1 <= grp_sha256_final_fu_112_ctx_in_data_ce1;
        else 
            ctx_in_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_in_data_d0_assign_proc : process(data_q0, ap_CS_fsm_state3, grp_sha256_final_fu_112_ctx_in_data_d0, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            ctx_in_data_d0 <= data_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            ctx_in_data_d0 <= grp_sha256_final_fu_112_ctx_in_data_d0;
        else 
            ctx_in_data_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_in_data_we0_assign_proc : process(ap_CS_fsm_state3, grp_sha256_final_fu_112_ctx_in_data_we0, ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            ctx_in_data_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            ctx_in_data_we0 <= grp_sha256_final_fu_112_ctx_in_data_we0;
        else 
            ctx_in_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_in_data_we1_assign_proc : process(grp_sha256_final_fu_112_ctx_in_data_we1, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            ctx_in_data_we1 <= grp_sha256_final_fu_112_ctx_in_data_we1;
        else 
            ctx_in_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    data_address0 <= i_i_cast1_fu_234_p1(5 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_239_p2 <= "1" when (i_i_reg_101 = ap_const_lv6_20) else "0";
    grp_sha256_final_fu_112_ap_start <= ap_reg_grp_sha256_final_fu_112_ap_start;
    grp_sha256_transform_fu_144_ap_start <= ap_reg_grp_sha256_transform_fu_144_ap_start;
    hash_address0 <= grp_sha256_final_fu_112_final_hash_address0;
    hash_address1 <= grp_sha256_final_fu_112_final_hash_address1;
    hash_ce0 <= grp_sha256_final_fu_112_final_hash_ce0;
    hash_ce1 <= grp_sha256_final_fu_112_final_hash_ce1;
    hash_d0 <= grp_sha256_final_fu_112_final_hash_d0;
    hash_d1 <= grp_sha256_final_fu_112_final_hash_d1;
    hash_we0 <= grp_sha256_final_fu_112_final_hash_we0;
    hash_we1 <= grp_sha256_final_fu_112_final_hash_we1;
    i_fu_245_p2 <= std_logic_vector(unsigned(i_i_reg_101) + unsigned(ap_const_lv6_1));
    i_i_cast1_fu_234_p1 <= std_logic_vector(resize(unsigned(i_i_reg_101),32));
    tmp_1_i_fu_268_p2 <= "1" when (ctx_datalen_assign_i_fu_256_p2 = ap_const_lv32_40) else "0";
    tmp_2_i_fu_278_p2 <= "1" when (unsigned(ctx_bitlen_0) > unsigned(ap_const_lv32_FFFFFDFF)) else "0";
    tmp_3_i_fu_288_p2 <= std_logic_vector(unsigned(ctx_bitlen_1) + unsigned(ap_const_lv32_1));
    tmp_4_i_fu_300_p2 <= std_logic_vector(unsigned(ctx_bitlen_0) + unsigned(ap_const_lv32_200));
end behav;
