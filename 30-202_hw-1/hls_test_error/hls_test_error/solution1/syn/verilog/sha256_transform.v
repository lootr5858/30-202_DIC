// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_transform (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_transform_address0,
        data_transform_ce0,
        data_transform_q0,
        data_transform_address1,
        data_transform_ce1,
        data_transform_q1,
        ctx_state_0_i,
        ctx_state_0_o,
        ctx_state_0_o_ap_vld,
        ctx_state_1_i,
        ctx_state_1_o,
        ctx_state_1_o_ap_vld,
        ctx_state_2_i,
        ctx_state_2_o,
        ctx_state_2_o_ap_vld,
        ctx_state_3_i,
        ctx_state_3_o,
        ctx_state_3_o_ap_vld,
        ctx_state_4_i,
        ctx_state_4_o,
        ctx_state_4_o_ap_vld,
        ctx_state_5_i,
        ctx_state_5_o,
        ctx_state_5_o_ap_vld,
        ctx_state_6_i,
        ctx_state_6_o,
        ctx_state_6_o_ap_vld,
        ctx_state_7_i,
        ctx_state_7_o,
        ctx_state_7_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 11'b1;
parameter    ap_ST_fsm_state2 = 11'b10;
parameter    ap_ST_fsm_state3 = 11'b100;
parameter    ap_ST_fsm_state4 = 11'b1000;
parameter    ap_ST_fsm_state5 = 11'b10000;
parameter    ap_ST_fsm_state6 = 11'b100000;
parameter    ap_ST_fsm_state7 = 11'b1000000;
parameter    ap_ST_fsm_state8 = 11'b10000000;
parameter    ap_ST_fsm_state9 = 11'b100000000;
parameter    ap_ST_fsm_state10 = 11'b1000000000;
parameter    ap_ST_fsm_state11 = 11'b10000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv7_10 = 7'b10000;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv7_4 = 7'b100;
parameter    ap_const_lv6_2 = 6'b10;
parameter    ap_const_lv6_3 = 6'b11;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_7E = 7'b1111110;
parameter    ap_const_lv7_79 = 7'b1111001;
parameter    ap_const_lv7_71 = 7'b1110001;
parameter    ap_const_lv7_70 = 7'b1110000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_16 = 32'b10110;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] data_transform_address0;
output   data_transform_ce0;
input  [7:0] data_transform_q0;
output  [5:0] data_transform_address1;
output   data_transform_ce1;
input  [7:0] data_transform_q1;
input  [31:0] ctx_state_0_i;
output  [31:0] ctx_state_0_o;
output   ctx_state_0_o_ap_vld;
input  [31:0] ctx_state_1_i;
output  [31:0] ctx_state_1_o;
output   ctx_state_1_o_ap_vld;
input  [31:0] ctx_state_2_i;
output  [31:0] ctx_state_2_o;
output   ctx_state_2_o_ap_vld;
input  [31:0] ctx_state_3_i;
output  [31:0] ctx_state_3_o;
output   ctx_state_3_o_ap_vld;
input  [31:0] ctx_state_4_i;
output  [31:0] ctx_state_4_o;
output   ctx_state_4_o_ap_vld;
input  [31:0] ctx_state_5_i;
output  [31:0] ctx_state_5_o;
output   ctx_state_5_o_ap_vld;
input  [31:0] ctx_state_6_i;
output  [31:0] ctx_state_6_o;
output   ctx_state_6_o_ap_vld;
input  [31:0] ctx_state_7_i;
output  [31:0] ctx_state_7_o;
output   ctx_state_7_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] data_transform_address0;
reg data_transform_ce0;
reg[5:0] data_transform_address1;
reg data_transform_ce1;
reg[31:0] ctx_state_0_o;
reg ctx_state_0_o_ap_vld;
reg[31:0] ctx_state_1_o;
reg ctx_state_1_o_ap_vld;
reg[31:0] ctx_state_2_o;
reg ctx_state_2_o_ap_vld;
reg[31:0] ctx_state_3_o;
reg ctx_state_3_o_ap_vld;
reg[31:0] ctx_state_4_o;
reg ctx_state_4_o_ap_vld;
reg[31:0] ctx_state_5_o;
reg ctx_state_5_o_ap_vld;
reg[31:0] ctx_state_6_o;
reg ctx_state_6_o_ap_vld;
reg[31:0] ctx_state_7_o;
reg ctx_state_7_o_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [5:0] k_address0;
reg    k_ce0;
wire   [31:0] k_q0;
wire   [31:0] i_cast_fu_377_p1;
reg   [31:0] i_cast_reg_1042;
wire   [0:0] ap_CS_fsm_state2;
wire   [4:0] tmp_9_fu_387_p2;
reg   [4:0] tmp_9_reg_1050;
wire   [0:0] tmp_fu_381_p2;
wire   [5:0] tmp_3_fu_398_p1;
reg   [5:0] tmp_3_reg_1060;
wire   [6:0] j_1_fu_413_p2;
reg   [6:0] j_1_reg_1071;
reg   [7:0] data_transform_load_reg_1076;
wire   [0:0] ap_CS_fsm_state3;
reg   [7:0] data_transform_load_1_reg_1081;
wire   [31:0] i_1_cast_fu_450_p1;
reg   [31:0] i_1_cast_reg_1096;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_454_p2;
reg   [31:0] a_reg_1114;
reg   [31:0] b_reg_1120;
reg   [31:0] c_reg_1126;
reg   [31:0] d_reg_1132;
reg   [31:0] e_reg_1138;
reg   [31:0] f_reg_1144;
reg   [31:0] g_reg_1150;
reg   [31:0] h_reg_1156;
wire   [31:0] m_q0;
reg   [31:0] m_load_reg_1162;
wire   [0:0] ap_CS_fsm_state6;
wire   [31:0] m_q1;
reg   [31:0] m_load_1_reg_1171;
wire   [6:0] i_3_fu_536_p2;
reg   [6:0] i_3_reg_1186;
wire   [31:0] tmp_27_fu_688_p2;
reg   [31:0] tmp_27_reg_1191;
wire   [0:0] ap_CS_fsm_state7;
wire   [6:0] i_4_fu_706_p2;
reg   [6:0] i_4_reg_1199;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] tmp_28_fu_700_p2;
wire   [31:0] tmp8_fu_820_p2;
reg   [31:0] tmp8_reg_1214;
wire   [31:0] tmp_64_fu_844_p2;
reg   [31:0] tmp_64_reg_1219;
wire   [31:0] t1_fu_944_p2;
reg   [31:0] t1_reg_1224;
wire   [0:0] ap_CS_fsm_state10;
wire   [31:0] e_1_fu_1027_p2;
wire   [0:0] ap_CS_fsm_state11;
wire   [31:0] a_1_fu_1036_p2;
reg   [5:0] m_address0;
reg    m_ce0;
reg    m_we0;
wire   [31:0] m_d0;
reg   [5:0] m_address1;
reg    m_ce1;
reg    m_we1;
reg   [4:0] i_reg_247;
wire   [0:0] ap_CS_fsm_state4;
reg   [6:0] j_reg_258;
reg   [6:0] i_1_reg_269;
wire   [0:0] ap_CS_fsm_state8;
reg   [31:0] h1_reg_281;
reg   [31:0] h_1_reg_290;
reg   [31:0] g_1_reg_301;
reg   [31:0] f_1_reg_312;
reg   [31:0] d1_reg_323;
reg   [31:0] d_1_reg_333;
reg   [31:0] c_1_reg_344;
reg   [31:0] b_1_reg_355;
reg   [6:0] i_2_reg_366;
wire   [31:0] j_cast4_fu_393_p1;
wire   [31:0] tmp_8_cast_fu_408_p1;
wire   [31:0] tmp_1_cast_fu_424_p1;
wire   [31:0] tmp_4_cast_fu_434_p1;
wire   [31:0] tmp_14_cast_fu_466_p1;
wire   [31:0] tmp_24_cast_fu_477_p1;
wire   [31:0] tmp_25_cast_fu_520_p1;
wire   [31:0] tmp_35_cast_fu_531_p1;
wire   [31:0] i_2_cast_fu_694_p1;
wire   [31:0] tmp_29_fu_850_p2;
wire   [31:0] tmp_30_fu_861_p2;
wire   [31:0] tmp_31_fu_872_p2;
wire   [31:0] tmp_32_fu_883_p2;
wire   [31:0] tmp_33_fu_894_p2;
wire   [31:0] tmp_34_fu_905_p2;
wire   [31:0] tmp_35_fu_916_p2;
wire   [31:0] tmp_36_fu_927_p2;
wire   [5:0] tmp_8_fu_402_p2;
wire   [5:0] tmp_1_fu_419_p2;
wire   [5:0] tmp_4_fu_429_p2;
wire   [6:0] tmp_s_fu_460_p2;
wire   [6:0] tmp_15_fu_471_p2;
wire   [6:0] tmp_16_fu_514_p2;
wire   [6:0] tmp_26_fu_525_p2;
wire   [16:0] tmp_10_fu_551_p1;
wire   [14:0] tmp_2_fu_542_p4;
wire   [18:0] tmp_18_fu_571_p1;
wire   [12:0] tmp_6_fu_562_p4;
wire   [21:0] tmp_12_fu_582_p4;
wire   [31:0] tmp_13_fu_591_p1;
wire   [31:0] tmp_11_fu_574_p3;
wire   [31:0] tmp2_fu_595_p2;
wire   [31:0] tmp_5_fu_554_p3;
wire   [6:0] tmp_21_fu_617_p1;
wire   [24:0] tmp_17_fu_607_p4;
wire   [17:0] tmp_38_fu_639_p1;
wire   [13:0] tmp_20_fu_629_p4;
wire   [28:0] tmp_23_fu_651_p4;
wire   [31:0] tmp_24_fu_661_p1;
wire   [31:0] tmp_22_fu_643_p3;
wire   [31:0] tmp3_fu_665_p2;
wire   [31:0] tmp_19_fu_621_p3;
wire   [31:0] tmp_14_fu_601_p2;
wire   [31:0] tmp_25_fu_671_p2;
wire   [31:0] tmp5_fu_682_p2;
wire   [31:0] tmp4_fu_677_p2;
wire   [5:0] tmp_41_fu_722_p1;
wire   [25:0] tmp_37_fu_712_p4;
wire   [10:0] tmp_44_fu_744_p1;
wire   [20:0] tmp_40_fu_734_p4;
wire   [24:0] tmp_52_fu_766_p1;
wire   [6:0] tmp_43_fu_756_p4;
wire   [31:0] tmp_39_fu_726_p3;
wire   [31:0] tmp_42_fu_748_p3;
wire   [31:0] tmp6_fu_778_p2;
wire   [31:0] tmp_45_fu_770_p3;
wire   [31:0] tmp_48_fu_796_p2;
wire   [31:0] tmp_47_fu_790_p2;
wire   [31:0] tmp_49_fu_802_p2;
wire   [31:0] tmp_46_fu_784_p2;
wire   [31:0] tmp_50_fu_808_p2;
wire   [31:0] tmp7_fu_814_p2;
wire   [31:0] tmp_61_fu_826_p2;
wire   [31:0] tmp_62_fu_832_p2;
wire   [31:0] tmp_63_fu_838_p2;
wire   [31:0] tmp9_fu_938_p2;
wire   [1:0] tmp_55_fu_959_p1;
wire   [29:0] tmp_51_fu_949_p4;
wire   [12:0] tmp_58_fu_981_p1;
wire   [18:0] tmp_54_fu_971_p4;
wire   [21:0] tmp_65_fu_1003_p1;
wire   [9:0] tmp_57_fu_993_p4;
wire   [31:0] tmp_53_fu_963_p3;
wire   [31:0] tmp_56_fu_985_p3;
wire   [31:0] tmp10_fu_1015_p2;
wire   [31:0] tmp_59_fu_1007_p3;
wire   [31:0] tmp11_fu_1032_p2;
wire   [31:0] tmp_60_fu_1021_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'b1;
end

sha256_transform_k #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
k_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_address0),
    .ce0(k_ce0),
    .q0(k_q0)
);

sha256_transform_m #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
m_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_address0),
    .ce0(m_ce0),
    .we0(m_we0),
    .d0(m_d0),
    .q0(m_q0),
    .address1(m_address1),
    .ce1(m_ce1),
    .we1(m_we1),
    .d1(tmp_27_reg_1191),
    .q1(m_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        b_1_reg_355 <= a_1_fu_1036_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_454_p2))) begin
        b_1_reg_355 <= ctx_state_0_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c_1_reg_344 <= b_1_reg_355;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_454_p2))) begin
        c_1_reg_344 <= ctx_state_1_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        d1_reg_323 <= d_1_reg_333;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_454_p2))) begin
        d1_reg_323 <= ctx_state_3_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        d_1_reg_333 <= c_1_reg_344;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_454_p2))) begin
        d_1_reg_333 <= ctx_state_2_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        f_1_reg_312 <= e_1_fu_1027_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_454_p2))) begin
        f_1_reg_312 <= ctx_state_4_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        g_1_reg_301 <= f_1_reg_312;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_454_p2))) begin
        g_1_reg_301 <= ctx_state_5_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        h1_reg_281 <= h_1_reg_290;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_454_p2))) begin
        h1_reg_281 <= ctx_state_7_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        h_1_reg_290 <= g_1_reg_301;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_454_p2))) begin
        h_1_reg_290 <= ctx_state_6_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_fu_381_p2 == 1'b0))) begin
        i_1_reg_269 <= ap_const_lv7_10;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_269 <= i_3_reg_1186;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_2_reg_366 <= i_4_reg_1199;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_454_p2))) begin
        i_2_reg_366 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_247 <= tmp_9_reg_1050;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_247 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_258 <= j_1_reg_1071;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_258 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_454_p2))) begin
        a_reg_1114 <= ctx_state_0_i;
        b_reg_1120 <= ctx_state_1_i;
        c_reg_1126 <= ctx_state_2_i;
        d_reg_1132 <= ctx_state_3_i;
        e_reg_1138 <= ctx_state_4_i;
        f_reg_1144 <= ctx_state_5_i;
        g_reg_1150 <= ctx_state_6_i;
        h_reg_1156 <= ctx_state_7_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_transform_load_1_reg_1081 <= data_transform_q1;
        data_transform_load_reg_1076 <= data_transform_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_cast_reg_1096[6 : 0] <= i_1_cast_fu_450_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_3_reg_1186 <= i_3_fu_536_p2;
        m_load_1_reg_1171 <= m_q1;
        m_load_reg_1162 <= m_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_4_reg_1199 <= i_4_fu_706_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_cast_reg_1042[4 : 0] <= i_cast_fu_377_p1[4 : 0];
        tmp_9_reg_1050 <= tmp_9_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_381_p2 == 1'b0))) begin
        j_1_reg_1071 <= j_1_fu_413_p2;
        tmp_3_reg_1060 <= tmp_3_fu_398_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        t1_reg_1224 <= t1_fu_944_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == tmp_28_fu_700_p2))) begin
        tmp8_reg_1214 <= tmp8_fu_820_p2;
        tmp_64_reg_1219 <= tmp_64_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_27_reg_1191 <= tmp_27_fu_688_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_0_o = tmp_29_fu_850_p2;
    end else begin
        ctx_state_0_o = ctx_state_0_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_0_o_ap_vld = 1'b1;
    end else begin
        ctx_state_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_1_o = tmp_30_fu_861_p2;
    end else begin
        ctx_state_1_o = ctx_state_1_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_1_o_ap_vld = 1'b1;
    end else begin
        ctx_state_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_2_o = tmp_31_fu_872_p2;
    end else begin
        ctx_state_2_o = ctx_state_2_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_2_o_ap_vld = 1'b1;
    end else begin
        ctx_state_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_3_o = tmp_32_fu_883_p2;
    end else begin
        ctx_state_3_o = ctx_state_3_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_3_o_ap_vld = 1'b1;
    end else begin
        ctx_state_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_4_o = tmp_33_fu_894_p2;
    end else begin
        ctx_state_4_o = ctx_state_4_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_4_o_ap_vld = 1'b1;
    end else begin
        ctx_state_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_5_o = tmp_34_fu_905_p2;
    end else begin
        ctx_state_5_o = ctx_state_5_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_5_o_ap_vld = 1'b1;
    end else begin
        ctx_state_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_6_o = tmp_35_fu_916_p2;
    end else begin
        ctx_state_6_o = ctx_state_6_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_6_o_ap_vld = 1'b1;
    end else begin
        ctx_state_6_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_7_o = tmp_36_fu_927_p2;
    end else begin
        ctx_state_7_o = ctx_state_7_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == tmp_28_fu_700_p2))) begin
        ctx_state_7_o_ap_vld = 1'b1;
    end else begin
        ctx_state_7_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_transform_address0 = tmp_1_cast_fu_424_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_transform_address0 = j_cast4_fu_393_p1;
    end else begin
        data_transform_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_transform_address1 = tmp_4_cast_fu_434_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_transform_address1 = tmp_8_cast_fu_408_p1;
    end else begin
        data_transform_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        data_transform_ce0 = 1'b1;
    end else begin
        data_transform_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        data_transform_ce1 = 1'b1;
    end else begin
        data_transform_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_ce0 = 1'b1;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_address0 = i_2_cast_fu_694_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_address0 = tmp_35_cast_fu_531_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address0 = tmp_14_cast_fu_466_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_address0 = i_cast_reg_1042;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_address1 = i_1_cast_reg_1096;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_address1 = tmp_25_cast_fu_520_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address1 = tmp_24_cast_fu_477_p1;
    end else begin
        m_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        m_ce1 = 1'b1;
    end else begin
        m_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_we0 = 1'b1;
    end else begin
        m_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_we1 = 1'b1;
    end else begin
        m_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(tmp_fu_381_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == exitcond_fu_454_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state9 : begin
            if (~(1'b0 == tmp_28_fu_700_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_1_fu_1036_p2 = (tmp11_fu_1032_p2 + tmp_60_fu_1021_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign e_1_fu_1027_p2 = (t1_reg_1224 + d1_reg_323);

assign exitcond_fu_454_p2 = ((i_1_reg_269 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign i_1_cast_fu_450_p1 = i_1_reg_269;

assign i_2_cast_fu_694_p1 = i_2_reg_366;

assign i_3_fu_536_p2 = (ap_const_lv7_1 + i_1_reg_269);

assign i_4_fu_706_p2 = (i_2_reg_366 + ap_const_lv7_1);

assign i_cast_fu_377_p1 = i_reg_247;

assign j_1_fu_413_p2 = (ap_const_lv7_4 + j_reg_258);

assign j_cast4_fu_393_p1 = j_reg_258;

assign k_address0 = i_2_cast_fu_694_p1;

assign m_d0 = {{{{data_transform_load_reg_1076}, {data_transform_load_1_reg_1081}}, {data_transform_q0}}, {data_transform_q1}};

assign t1_fu_944_p2 = (tmp8_reg_1214 + tmp9_fu_938_p2);

assign tmp10_fu_1015_p2 = (tmp_53_fu_963_p3 ^ tmp_56_fu_985_p3);

assign tmp11_fu_1032_p2 = (tmp_64_reg_1219 + t1_reg_1224);

assign tmp2_fu_595_p2 = (tmp_13_fu_591_p1 ^ tmp_11_fu_574_p3);

assign tmp3_fu_665_p2 = (tmp_24_fu_661_p1 ^ tmp_22_fu_643_p3);

assign tmp4_fu_677_p2 = (m_load_1_reg_1171 + m_q0);

assign tmp5_fu_682_p2 = (tmp_14_fu_601_p2 + tmp_25_fu_671_p2);

assign tmp6_fu_778_p2 = (tmp_39_fu_726_p3 ^ tmp_42_fu_748_p3);

assign tmp7_fu_814_p2 = (tmp_46_fu_784_p2 + tmp_50_fu_808_p2);

assign tmp8_fu_820_p2 = (tmp7_fu_814_p2 + h1_reg_281);

assign tmp9_fu_938_p2 = (k_q0 + m_q0);

assign tmp_10_fu_551_p1 = m_load_reg_1162[16:0];

assign tmp_11_fu_574_p3 = {{tmp_18_fu_571_p1}, {tmp_6_fu_562_p4}};

assign tmp_12_fu_582_p4 = {{m_load_reg_1162[ap_const_lv32_1F : ap_const_lv32_A]}};

assign tmp_13_fu_591_p1 = tmp_12_fu_582_p4;

assign tmp_14_cast_fu_466_p1 = tmp_s_fu_460_p2;

assign tmp_14_fu_601_p2 = (tmp2_fu_595_p2 ^ tmp_5_fu_554_p3);

assign tmp_15_fu_471_p2 = ($signed(ap_const_lv7_79) + $signed(i_1_reg_269));

assign tmp_16_fu_514_p2 = ($signed(ap_const_lv7_71) + $signed(i_1_reg_269));

assign tmp_17_fu_607_p4 = {{m_q1[ap_const_lv32_1F : ap_const_lv32_7]}};

assign tmp_18_fu_571_p1 = m_load_reg_1162[18:0];

assign tmp_19_fu_621_p3 = {{tmp_21_fu_617_p1}, {tmp_17_fu_607_p4}};

assign tmp_1_cast_fu_424_p1 = tmp_1_fu_419_p2;

assign tmp_1_fu_419_p2 = (tmp_3_reg_1060 | ap_const_lv6_2);

assign tmp_20_fu_629_p4 = {{m_q1[ap_const_lv32_1F : ap_const_lv32_12]}};

assign tmp_21_fu_617_p1 = m_q1[6:0];

assign tmp_22_fu_643_p3 = {{tmp_38_fu_639_p1}, {tmp_20_fu_629_p4}};

assign tmp_23_fu_651_p4 = {{m_q1[ap_const_lv32_1F : ap_const_lv32_3]}};

assign tmp_24_cast_fu_477_p1 = tmp_15_fu_471_p2;

assign tmp_24_fu_661_p1 = tmp_23_fu_651_p4;

assign tmp_25_cast_fu_520_p1 = tmp_16_fu_514_p2;

assign tmp_25_fu_671_p2 = (tmp3_fu_665_p2 ^ tmp_19_fu_621_p3);

assign tmp_26_fu_525_p2 = ($signed(ap_const_lv7_70) + $signed(i_1_reg_269));

assign tmp_27_fu_688_p2 = (tmp5_fu_682_p2 + tmp4_fu_677_p2);

assign tmp_28_fu_700_p2 = ((i_2_reg_366 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign tmp_29_fu_850_p2 = (a_reg_1114 + b_1_reg_355);

assign tmp_2_fu_542_p4 = {{m_load_reg_1162[ap_const_lv32_1F : ap_const_lv32_11]}};

assign tmp_30_fu_861_p2 = (b_reg_1120 + c_1_reg_344);

assign tmp_31_fu_872_p2 = (c_reg_1126 + d_1_reg_333);

assign tmp_32_fu_883_p2 = (d_reg_1132 + d1_reg_323);

assign tmp_33_fu_894_p2 = (e_reg_1138 + f_1_reg_312);

assign tmp_34_fu_905_p2 = (f_reg_1144 + g_1_reg_301);

assign tmp_35_cast_fu_531_p1 = tmp_26_fu_525_p2;

assign tmp_35_fu_916_p2 = (g_reg_1150 + h_1_reg_290);

assign tmp_36_fu_927_p2 = (h_reg_1156 + h1_reg_281);

assign tmp_37_fu_712_p4 = {{f_1_reg_312[ap_const_lv32_1F : ap_const_lv32_6]}};

assign tmp_38_fu_639_p1 = m_q1[17:0];

assign tmp_39_fu_726_p3 = {{tmp_41_fu_722_p1}, {tmp_37_fu_712_p4}};

assign tmp_3_fu_398_p1 = j_reg_258[5:0];

assign tmp_40_fu_734_p4 = {{f_1_reg_312[ap_const_lv32_1F : ap_const_lv32_B]}};

assign tmp_41_fu_722_p1 = f_1_reg_312[5:0];

assign tmp_42_fu_748_p3 = {{tmp_44_fu_744_p1}, {tmp_40_fu_734_p4}};

assign tmp_43_fu_756_p4 = {{f_1_reg_312[ap_const_lv32_1F : ap_const_lv32_19]}};

assign tmp_44_fu_744_p1 = f_1_reg_312[10:0];

assign tmp_45_fu_770_p3 = {{tmp_52_fu_766_p1}, {tmp_43_fu_756_p4}};

assign tmp_46_fu_784_p2 = (tmp6_fu_778_p2 ^ tmp_45_fu_770_p3);

assign tmp_47_fu_790_p2 = (f_1_reg_312 & g_1_reg_301);

assign tmp_48_fu_796_p2 = (f_1_reg_312 ^ ap_const_lv32_FFFFFFFF);

assign tmp_49_fu_802_p2 = (h_1_reg_290 & tmp_48_fu_796_p2);

assign tmp_4_cast_fu_434_p1 = tmp_4_fu_429_p2;

assign tmp_4_fu_429_p2 = (tmp_3_reg_1060 | ap_const_lv6_3);

assign tmp_50_fu_808_p2 = (tmp_47_fu_790_p2 ^ tmp_49_fu_802_p2);

assign tmp_51_fu_949_p4 = {{b_1_reg_355[ap_const_lv32_1F : ap_const_lv32_2]}};

assign tmp_52_fu_766_p1 = f_1_reg_312[24:0];

assign tmp_53_fu_963_p3 = {{tmp_55_fu_959_p1}, {tmp_51_fu_949_p4}};

assign tmp_54_fu_971_p4 = {{b_1_reg_355[ap_const_lv32_1F : ap_const_lv32_D]}};

assign tmp_55_fu_959_p1 = b_1_reg_355[1:0];

assign tmp_56_fu_985_p3 = {{tmp_58_fu_981_p1}, {tmp_54_fu_971_p4}};

assign tmp_57_fu_993_p4 = {{b_1_reg_355[ap_const_lv32_1F : ap_const_lv32_16]}};

assign tmp_58_fu_981_p1 = b_1_reg_355[12:0];

assign tmp_59_fu_1007_p3 = {{tmp_65_fu_1003_p1}, {tmp_57_fu_993_p4}};

assign tmp_5_fu_554_p3 = {{tmp_10_fu_551_p1}, {tmp_2_fu_542_p4}};

assign tmp_60_fu_1021_p2 = (tmp10_fu_1015_p2 ^ tmp_59_fu_1007_p3);

assign tmp_61_fu_826_p2 = (c_1_reg_344 ^ d_1_reg_333);

assign tmp_62_fu_832_p2 = (b_1_reg_355 & tmp_61_fu_826_p2);

assign tmp_63_fu_838_p2 = (c_1_reg_344 & d_1_reg_333);

assign tmp_64_fu_844_p2 = (tmp_62_fu_832_p2 ^ tmp_63_fu_838_p2);

assign tmp_65_fu_1003_p1 = b_1_reg_355[21:0];

assign tmp_6_fu_562_p4 = {{m_load_reg_1162[ap_const_lv32_1F : ap_const_lv32_13]}};

assign tmp_8_cast_fu_408_p1 = tmp_8_fu_402_p2;

assign tmp_8_fu_402_p2 = (tmp_3_fu_398_p1 | ap_const_lv6_1);

assign tmp_9_fu_387_p2 = (i_reg_247 + ap_const_lv5_1);

assign tmp_fu_381_p2 = ((i_reg_247 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign tmp_s_fu_460_p2 = ($signed(ap_const_lv7_7E) + $signed(i_1_reg_269));

always @ (posedge ap_clk) begin
    i_cast_reg_1042[31:5] <= 27'b000000000000000000000000000;
    i_1_cast_reg_1096[31:7] <= 25'b0000000000000000000000000;
end

endmodule //sha256_transform
