// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_final (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        final_hash_address0,
        final_hash_ce0,
        final_hash_we0,
        final_hash_d0,
        final_hash_address1,
        final_hash_ce1,
        final_hash_we1,
        final_hash_d1,
        ctx_datalen,
        ctx_in_data_address0,
        ctx_in_data_ce0,
        ctx_in_data_we0,
        ctx_in_data_d0,
        ctx_in_data_q0,
        ctx_in_data_address1,
        ctx_in_data_ce1,
        ctx_in_data_we1,
        ctx_in_data_d1,
        ctx_in_data_q1,
        ctx_state_0_i,
        ctx_state_0_o,
        ctx_state_0_o_ap_vld,
        ctx_state_1_i,
        ctx_state_1_o,
        ctx_state_1_o_ap_vld,
        ctx_state_2_i,
        ctx_state_2_o,
        ctx_state_2_o_ap_vld,
        ctx_state_3_i,
        ctx_state_3_o,
        ctx_state_3_o_ap_vld,
        ctx_state_4_i,
        ctx_state_4_o,
        ctx_state_4_o_ap_vld,
        ctx_state_5_i,
        ctx_state_5_o,
        ctx_state_5_o_ap_vld,
        ctx_state_6_i,
        ctx_state_6_o,
        ctx_state_6_o_ap_vld,
        ctx_state_7_i,
        ctx_state_7_o,
        ctx_state_7_o_ap_vld,
        ctx_bitlen_0_i,
        ctx_bitlen_0_o,
        ctx_bitlen_0_o_ap_vld,
        ctx_bitlen_1_i,
        ctx_bitlen_1_o,
        ctx_bitlen_1_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 14'b1;
parameter    ap_ST_fsm_state2 = 14'b10;
parameter    ap_ST_fsm_state3 = 14'b100;
parameter    ap_ST_fsm_state4 = 14'b1000;
parameter    ap_ST_fsm_state5 = 14'b10000;
parameter    ap_ST_fsm_state6 = 14'b100000;
parameter    ap_ST_fsm_state7 = 14'b1000000;
parameter    ap_ST_fsm_state8 = 14'b10000000;
parameter    ap_ST_fsm_state9 = 14'b100000000;
parameter    ap_ST_fsm_state10 = 14'b1000000000;
parameter    ap_ST_fsm_state11 = 14'b10000000000;
parameter    ap_ST_fsm_state12 = 14'b100000000000;
parameter    ap_ST_fsm_state13 = 14'b1000000000000;
parameter    ap_ST_fsm_state14 = 14'b10000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv6_3F = 6'b111111;
parameter    ap_const_lv6_3E = 6'b111110;
parameter    ap_const_lv6_3D = 6'b111101;
parameter    ap_const_lv6_3C = 6'b111100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv6_3B = 6'b111011;
parameter    ap_const_lv6_3A = 6'b111010;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv6_39 = 6'b111001;
parameter    ap_const_lv6_38 = 6'b111000;
parameter    ap_const_lv32_38 = 32'b111000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv26_0 = 26'b00000000000000000000000000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_37 = 32'b110111;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv5_18 = 5'b11000;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv5_14 = 5'b10100;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] final_hash_address0;
output   final_hash_ce0;
output   final_hash_we0;
output  [7:0] final_hash_d0;
output  [4:0] final_hash_address1;
output   final_hash_ce1;
output   final_hash_we1;
output  [7:0] final_hash_d1;
input  [31:0] ctx_datalen;
output  [5:0] ctx_in_data_address0;
output   ctx_in_data_ce0;
output   ctx_in_data_we0;
output  [7:0] ctx_in_data_d0;
input  [7:0] ctx_in_data_q0;
output  [5:0] ctx_in_data_address1;
output   ctx_in_data_ce1;
output   ctx_in_data_we1;
output  [7:0] ctx_in_data_d1;
input  [7:0] ctx_in_data_q1;
input  [31:0] ctx_state_0_i;
output  [31:0] ctx_state_0_o;
output   ctx_state_0_o_ap_vld;
input  [31:0] ctx_state_1_i;
output  [31:0] ctx_state_1_o;
output   ctx_state_1_o_ap_vld;
input  [31:0] ctx_state_2_i;
output  [31:0] ctx_state_2_o;
output   ctx_state_2_o_ap_vld;
input  [31:0] ctx_state_3_i;
output  [31:0] ctx_state_3_o;
output   ctx_state_3_o_ap_vld;
input  [31:0] ctx_state_4_i;
output  [31:0] ctx_state_4_o;
output   ctx_state_4_o_ap_vld;
input  [31:0] ctx_state_5_i;
output  [31:0] ctx_state_5_o;
output   ctx_state_5_o_ap_vld;
input  [31:0] ctx_state_6_i;
output  [31:0] ctx_state_6_o;
output   ctx_state_6_o_ap_vld;
input  [31:0] ctx_state_7_i;
output  [31:0] ctx_state_7_o;
output   ctx_state_7_o_ap_vld;
input  [31:0] ctx_bitlen_0_i;
output  [31:0] ctx_bitlen_0_o;
output   ctx_bitlen_0_o_ap_vld;
input  [31:0] ctx_bitlen_1_i;
output  [31:0] ctx_bitlen_1_o;
output   ctx_bitlen_1_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] final_hash_address0;
reg final_hash_ce0;
reg final_hash_we0;
reg[7:0] final_hash_d0;
reg[4:0] final_hash_address1;
reg final_hash_ce1;
reg final_hash_we1;
reg[7:0] final_hash_d1;
reg[5:0] ctx_in_data_address0;
reg ctx_in_data_ce0;
reg ctx_in_data_we0;
reg[7:0] ctx_in_data_d0;
reg[5:0] ctx_in_data_address1;
reg ctx_in_data_ce1;
reg ctx_in_data_we1;
reg[7:0] ctx_in_data_d1;
reg[31:0] ctx_state_0_o;
reg ctx_state_0_o_ap_vld;
reg[31:0] ctx_state_1_o;
reg ctx_state_1_o_ap_vld;
reg[31:0] ctx_state_2_o;
reg ctx_state_2_o_ap_vld;
reg[31:0] ctx_state_3_o;
reg ctx_state_3_o_ap_vld;
reg[31:0] ctx_state_4_o;
reg ctx_state_4_o_ap_vld;
reg[31:0] ctx_state_5_o;
reg ctx_state_5_o_ap_vld;
reg[31:0] ctx_state_6_o;
reg ctx_state_6_o_ap_vld;
reg[31:0] ctx_state_7_o;
reg ctx_state_7_o_ap_vld;
reg[31:0] ctx_bitlen_0_o;
reg ctx_bitlen_0_o_ap_vld;
reg[31:0] ctx_bitlen_1_o;
reg ctx_bitlen_1_o_ap_vld;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [0:0] tmp_fu_324_p2;
reg   [0:0] tmp_reg_790;
wire   [31:0] i_1_fu_330_p2;
wire   [0:0] ap_CS_fsm_state2;
wire   [5:0] j_2_fu_364_p2;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] tmp_s_fu_358_p2;
wire   [31:0] tmp_68_fu_408_p2;
wire   [0:0] tmp_67_fu_398_p2;
reg   [7:0] tmp_72_reg_823;
reg   [7:0] tmp_73_reg_828;
wire   [31:0] i_5_fu_510_p2;
wire   [0:0] ap_CS_fsm_state5;
wire   [7:0] tmp_93_fu_523_p1;
reg   [7:0] tmp_93_reg_841;
wire   [0:0] ap_CS_fsm_state6;
reg   [7:0] tmp_74_reg_846;
reg   [7:0] tmp_76_reg_851;
reg   [7:0] tmp_77_reg_856;
wire   [31:0] i_2_cast2_fu_557_p1;
reg   [31:0] i_2_cast2_reg_861;
wire   [0:0] ap_CS_fsm_state11;
wire   [4:0] i_2_cast1_fu_561_p1;
reg   [4:0] i_2_cast1_reg_866;
wire   [2:0] i_6_fu_571_p2;
reg   [2:0] i_6_reg_874;
wire   [31:0] tmp_103_cast_fu_595_p1;
reg   [31:0] tmp_103_cast_reg_879;
wire   [0:0] tmp_78_fu_565_p2;
wire   [2:0] sum2_fu_614_p2;
reg   [2:0] sum2_reg_889;
wire   [3:0] sum1_fu_640_p3;
reg   [3:0] sum1_reg_895;
wire   [7:0] tmp_103_fu_749_p1;
reg   [7:0] tmp_103_reg_900;
wire   [0:0] ap_CS_fsm_state13;
wire   [7:0] tmp_104_fu_762_p1;
reg   [7:0] tmp_104_reg_905;
wire    grp_sha256_transform_fu_295_ap_start;
wire    grp_sha256_transform_fu_295_ap_done;
wire    grp_sha256_transform_fu_295_ap_idle;
wire    grp_sha256_transform_fu_295_ap_ready;
wire   [5:0] grp_sha256_transform_fu_295_data_transform_address0;
wire    grp_sha256_transform_fu_295_data_transform_ce0;
wire   [5:0] grp_sha256_transform_fu_295_data_transform_address1;
wire    grp_sha256_transform_fu_295_data_transform_ce1;
wire   [31:0] grp_sha256_transform_fu_295_ctx_state_0_o;
wire    grp_sha256_transform_fu_295_ctx_state_0_o_ap_vld;
wire   [31:0] grp_sha256_transform_fu_295_ctx_state_1_o;
wire    grp_sha256_transform_fu_295_ctx_state_1_o_ap_vld;
wire   [31:0] grp_sha256_transform_fu_295_ctx_state_2_o;
wire    grp_sha256_transform_fu_295_ctx_state_2_o_ap_vld;
wire   [31:0] grp_sha256_transform_fu_295_ctx_state_3_o;
wire    grp_sha256_transform_fu_295_ctx_state_3_o_ap_vld;
wire   [31:0] grp_sha256_transform_fu_295_ctx_state_4_o;
wire    grp_sha256_transform_fu_295_ctx_state_4_o_ap_vld;
wire   [31:0] grp_sha256_transform_fu_295_ctx_state_5_o;
wire    grp_sha256_transform_fu_295_ctx_state_5_o_ap_vld;
wire   [31:0] grp_sha256_transform_fu_295_ctx_state_6_o;
wire    grp_sha256_transform_fu_295_ctx_state_6_o_ap_vld;
wire   [31:0] grp_sha256_transform_fu_295_ctx_state_7_o;
wire    grp_sha256_transform_fu_295_ctx_state_7_o_ap_vld;
reg   [31:0] i_1_in_reg_245;
wire   [0:0] icmp_fu_347_p2;
reg   [5:0] j_reg_254;
wire   [0:0] ap_CS_fsm_state3;
reg   [31:0] i_0_in_reg_265;
wire   [0:0] exitcond_fu_517_p2;
reg   [31:0] ctx_bitlen_1_loc_reg_274;
reg   [2:0] i_2_reg_283;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state14;
reg    ap_reg_grp_sha256_transform_fu_295_ap_start;
wire   [0:0] ap_CS_fsm_state9;
wire   [31:0] j_cast5_fu_353_p1;
wire   [31:0] sum2_cast_fu_620_p1;
wire   [31:0] sum4_cast_fu_648_p1;
wire   [0:0] ap_CS_fsm_state12;
wire   [31:0] sum6_cast_fu_684_p1;
wire   [31:0] sum8_cast_fu_711_p1;
wire   [31:0] sum_cast_fu_735_p1;
wire   [31:0] sum1_cast_fu_769_p1;
wire   [31:0] sum3_cast_fu_777_p1;
wire   [31:0] tmp_69_fu_448_p2;
wire   [7:0] tmp_70_fu_472_p2;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state8;
wire   [7:0] tmp_98_fu_609_p1;
wire   [7:0] tmp_99_fu_635_p1;
wire   [7:0] tmp_97_fu_662_p1;
wire   [7:0] tmp_100_fu_676_p1;
wire   [7:0] tmp_101_fu_698_p1;
wire   [7:0] tmp_102_fu_725_p1;
wire   [25:0] tmp_75_fu_337_p4;
wire   [5:0] tmp_83_fu_374_p1;
wire   [8:0] tmp_65_fu_380_p3;
wire   [31:0] tmp_82_cast_fu_388_p1;
wire   [31:0] tmp_66_fu_392_p2;
wire   [4:0] tmp_85_fu_377_p1;
wire   [23:0] tmp_91_fu_440_p1;
wire   [23:0] tmp_17_fu_444_p1;
wire   [15:0] tmp_89_fu_432_p1;
wire   [15:0] tmp_15_fu_436_p1;
wire   [7:0] tmp_87_fu_428_p1;
wire   [7:0] tmp_12_fu_420_p3;
wire   [15:0] tmp_86_cast_fu_460_p2;
wire   [23:0] tmp_86_cast3_fu_454_p2;
wire   [1:0] tmp_95_fu_577_p1;
wire   [4:0] tmp_79_fu_581_p3;
wire   [4:0] tmp_80_fu_589_p2;
wire   [31:0] tmp_82_fu_603_p2;
wire   [31:0] tmp_84_fu_629_p2;
wire   [31:0] tmp_81_fu_657_p2;
wire   [31:0] tmp_86_fu_671_p2;
wire  signed [3:0] sum6_cast8_fu_681_p1;
wire   [31:0] tmp_88_fu_693_p2;
wire   [4:0] sum4_fu_703_p3;
wire   [31:0] tmp_90_fu_720_p2;
wire   [4:0] sum_fu_730_p2;
wire   [31:0] tmp_92_fu_744_p2;
wire   [31:0] tmp_94_fu_757_p2;
wire  signed [4:0] sum1_cast7_fu_766_p1;
wire  signed [4:0] sum3_cast6_fu_774_p1;
reg   [13:0] ap_NS_fsm;
reg    ap_condition_132;
reg    ap_condition_260;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'b1;
#0 ap_reg_grp_sha256_transform_fu_295_ap_start = 1'b0;
end

sha256_transform grp_sha256_transform_fu_295(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_transform_fu_295_ap_start),
    .ap_done(grp_sha256_transform_fu_295_ap_done),
    .ap_idle(grp_sha256_transform_fu_295_ap_idle),
    .ap_ready(grp_sha256_transform_fu_295_ap_ready),
    .data_transform_address0(grp_sha256_transform_fu_295_data_transform_address0),
    .data_transform_ce0(grp_sha256_transform_fu_295_data_transform_ce0),
    .data_transform_q0(ctx_in_data_q0),
    .data_transform_address1(grp_sha256_transform_fu_295_data_transform_address1),
    .data_transform_ce1(grp_sha256_transform_fu_295_data_transform_ce1),
    .data_transform_q1(ctx_in_data_q1),
    .ctx_state_0_i(ctx_state_0_i),
    .ctx_state_0_o(grp_sha256_transform_fu_295_ctx_state_0_o),
    .ctx_state_0_o_ap_vld(grp_sha256_transform_fu_295_ctx_state_0_o_ap_vld),
    .ctx_state_1_i(ctx_state_1_i),
    .ctx_state_1_o(grp_sha256_transform_fu_295_ctx_state_1_o),
    .ctx_state_1_o_ap_vld(grp_sha256_transform_fu_295_ctx_state_1_o_ap_vld),
    .ctx_state_2_i(ctx_state_2_i),
    .ctx_state_2_o(grp_sha256_transform_fu_295_ctx_state_2_o),
    .ctx_state_2_o_ap_vld(grp_sha256_transform_fu_295_ctx_state_2_o_ap_vld),
    .ctx_state_3_i(ctx_state_3_i),
    .ctx_state_3_o(grp_sha256_transform_fu_295_ctx_state_3_o),
    .ctx_state_3_o_ap_vld(grp_sha256_transform_fu_295_ctx_state_3_o_ap_vld),
    .ctx_state_4_i(ctx_state_4_i),
    .ctx_state_4_o(grp_sha256_transform_fu_295_ctx_state_4_o),
    .ctx_state_4_o_ap_vld(grp_sha256_transform_fu_295_ctx_state_4_o_ap_vld),
    .ctx_state_5_i(ctx_state_5_i),
    .ctx_state_5_o(grp_sha256_transform_fu_295_ctx_state_5_o),
    .ctx_state_5_o_ap_vld(grp_sha256_transform_fu_295_ctx_state_5_o_ap_vld),
    .ctx_state_6_i(ctx_state_6_i),
    .ctx_state_6_o(grp_sha256_transform_fu_295_ctx_state_6_o),
    .ctx_state_6_o_ap_vld(grp_sha256_transform_fu_295_ctx_state_6_o_ap_vld),
    .ctx_state_7_i(ctx_state_7_i),
    .ctx_state_7_o(grp_sha256_transform_fu_295_ctx_state_7_o),
    .ctx_state_7_o_ap_vld(grp_sha256_transform_fu_295_ctx_state_7_o_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_sha256_transform_fu_295_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (1'b0 == icmp_fu_347_p2)) | (1'b1 == ap_CS_fsm_state9))) begin
            ap_reg_grp_sha256_transform_fu_295_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha256_transform_fu_295_ap_ready)) begin
            ap_reg_grp_sha256_transform_fu_295_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((ap_condition_260 == 1'b1)) begin
            ctx_bitlen_1_loc_reg_274 <= ctx_bitlen_1_i;
        end else if ((ap_condition_132 == 1'b1)) begin
            ctx_bitlen_1_loc_reg_274 <= tmp_68_fu_408_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(tmp_fu_324_p2 == 1'b0))) begin
        i_0_in_reg_265 <= ctx_datalen;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond_fu_517_p2))) begin
        i_0_in_reg_265 <= i_5_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (tmp_fu_324_p2 == 1'b0))) begin
        i_1_in_reg_245 <= ctx_datalen;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == icmp_fu_347_p2))) begin
        i_1_in_reg_245 <= i_1_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_2_reg_283 <= i_6_reg_874;
    end else if ((~(1'b0 == grp_sha256_transform_fu_295_ap_done) & (1'b1 == ap_CS_fsm_state10))) begin
        i_2_reg_283 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_reg_790 == 1'b0) & (1'b0 == tmp_s_fu_358_p2))) begin
        j_reg_254 <= j_2_fu_364_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == grp_sha256_transform_fu_295_ap_done))) begin
        j_reg_254 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_2_cast1_reg_866[2 : 0] <= i_2_cast1_fu_561_p1[2 : 0];
        i_2_cast2_reg_861[2 : 0] <= i_2_cast2_fu_557_p1[2 : 0];
        i_6_reg_874 <= i_6_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'b0 == tmp_78_fu_565_p2))) begin
        sum1_reg_895[2 : 0] <= sum1_fu_640_p3[2 : 0];
        sum2_reg_889 <= sum2_fu_614_p2;
        tmp_103_cast_reg_879[4 : 3] <= tmp_103_cast_fu_595_p1[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_103_reg_900 <= tmp_103_fu_749_p1;
        tmp_104_reg_905 <= tmp_104_fu_762_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (~(tmp_reg_790 == 1'b0) | ~(1'b0 == tmp_s_fu_358_p2)))) begin
        tmp_72_reg_823 <= {{tmp_86_cast3_fu_454_p2[ap_const_lv32_17 : ap_const_lv32_10]}};
        tmp_73_reg_828 <= {{tmp_69_fu_448_p2[ap_const_lv32_1F : ap_const_lv32_18]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_74_reg_846 <= {{ctx_bitlen_1_loc_reg_274[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_76_reg_851 <= {{ctx_bitlen_1_loc_reg_274[ap_const_lv32_17 : ap_const_lv32_10]}};
        tmp_77_reg_856 <= {{ctx_bitlen_1_loc_reg_274[ap_const_lv32_1F : ap_const_lv32_18]}};
        tmp_93_reg_841 <= tmp_93_fu_523_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_reg_790 <= tmp_fu_324_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state11) & ~(1'b0 == tmp_78_fu_565_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(1'b0 == tmp_78_fu_565_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (~(tmp_reg_790 == 1'b0) | ~(1'b0 == tmp_s_fu_358_p2)))) begin
        ctx_bitlen_0_o = tmp_69_fu_448_p2;
    end else begin
        ctx_bitlen_0_o = ctx_bitlen_0_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (~(tmp_reg_790 == 1'b0) | ~(1'b0 == tmp_s_fu_358_p2)))) begin
        ctx_bitlen_0_o_ap_vld = 1'b1;
    end else begin
        ctx_bitlen_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((~(tmp_reg_790 == 1'b0) & ~(1'b0 == tmp_67_fu_398_p2)) | (~(1'b0 == tmp_s_fu_358_p2) & ~(1'b0 == tmp_67_fu_398_p2))))) begin
        ctx_bitlen_1_o = tmp_68_fu_408_p2;
    end else begin
        ctx_bitlen_1_o = ctx_bitlen_1_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((~(tmp_reg_790 == 1'b0) & ~(1'b0 == tmp_67_fu_398_p2)) | (~(1'b0 == tmp_s_fu_358_p2) & ~(1'b0 == tmp_67_fu_398_p2))))) begin
        ctx_bitlen_1_o_ap_vld = 1'b1;
    end else begin
        ctx_bitlen_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_in_data_address0 = ap_const_lv6_38;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_in_data_address0 = ap_const_lv6_3A;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_in_data_address0 = ap_const_lv6_3C;
    end else if (((1'b1 == ap_CS_fsm_state4) & (~(tmp_reg_790 == 1'b0) | ~(1'b0 == tmp_s_fu_358_p2)))) begin
        ctx_in_data_address0 = ap_const_lv6_3F;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_reg_790 == 1'b0) & (1'b0 == tmp_s_fu_358_p2))) begin
        ctx_in_data_address0 = j_cast5_fu_353_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == icmp_fu_347_p2))) begin
        ctx_in_data_address0 = i_1_fu_330_p2;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        ctx_in_data_address0 = ctx_datalen;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_in_data_address0 = grp_sha256_transform_fu_295_data_transform_address0;
    end else begin
        ctx_in_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_in_data_address1 = ap_const_lv6_39;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_in_data_address1 = ap_const_lv6_3B;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_in_data_address1 = ap_const_lv6_3D;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_in_data_address1 = i_5_fu_510_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_in_data_address1 = ap_const_lv6_3E;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_in_data_address1 = grp_sha256_transform_fu_295_data_transform_address1;
    end else begin
        ctx_in_data_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state4) & (~(tmp_reg_790 == 1'b0) | ~(1'b0 == tmp_s_fu_358_p2))) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == icmp_fu_347_p2)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_reg_790 == 1'b0) & (1'b0 == tmp_s_fu_358_p2)) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        ctx_in_data_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_in_data_ce0 = grp_sha256_transform_fu_295_data_transform_ce0;
    end else begin
        ctx_in_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        ctx_in_data_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_in_data_ce1 = grp_sha256_transform_fu_295_data_transform_ce1;
    end else begin
        ctx_in_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_in_data_d0 = tmp_77_reg_856;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_in_data_d0 = tmp_74_reg_846;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_in_data_d0 = tmp_73_reg_828;
    end else if (((1'b1 == ap_CS_fsm_state4) & (~(tmp_reg_790 == 1'b0) | ~(1'b0 == tmp_s_fu_358_p2)))) begin
        ctx_in_data_d0 = tmp_70_fu_472_p2;
    end else if ((((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == icmp_fu_347_p2)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_reg_790 == 1'b0) & (1'b0 == tmp_s_fu_358_p2)))) begin
        ctx_in_data_d0 = ap_const_lv8_0;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        ctx_in_data_d0 = ap_const_lv8_80;
    end else begin
        ctx_in_data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_in_data_d1 = tmp_76_reg_851;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_in_data_d1 = tmp_93_reg_841;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_in_data_d1 = tmp_72_reg_823;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_in_data_d1 = ap_const_lv8_0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_in_data_d1 = {{tmp_86_cast_fu_460_p2[ap_const_lv32_F : ap_const_lv32_8]}};
    end else begin
        ctx_in_data_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state4) & (~(tmp_reg_790 == 1'b0) | ~(1'b0 == tmp_s_fu_358_p2))) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == icmp_fu_347_p2)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_reg_790 == 1'b0) & (1'b0 == tmp_s_fu_358_p2)) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        ctx_in_data_we0 = 1'b1;
    end else begin
        ctx_in_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (~(tmp_reg_790 == 1'b0) | ~(1'b0 == tmp_s_fu_358_p2))) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond_fu_517_p2)) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        ctx_in_data_we1 = 1'b1;
    end else begin
        ctx_in_data_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_0_o_ap_vld)))) begin
        ctx_state_0_o = grp_sha256_transform_fu_295_ctx_state_0_o;
    end else begin
        ctx_state_0_o = ctx_state_0_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_state_0_o_ap_vld = grp_sha256_transform_fu_295_ctx_state_0_o_ap_vld;
    end else begin
        ctx_state_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_1_o_ap_vld)))) begin
        ctx_state_1_o = grp_sha256_transform_fu_295_ctx_state_1_o;
    end else begin
        ctx_state_1_o = ctx_state_1_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_state_1_o_ap_vld = grp_sha256_transform_fu_295_ctx_state_1_o_ap_vld;
    end else begin
        ctx_state_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_2_o_ap_vld)))) begin
        ctx_state_2_o = grp_sha256_transform_fu_295_ctx_state_2_o;
    end else begin
        ctx_state_2_o = ctx_state_2_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_state_2_o_ap_vld = grp_sha256_transform_fu_295_ctx_state_2_o_ap_vld;
    end else begin
        ctx_state_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_3_o_ap_vld)))) begin
        ctx_state_3_o = grp_sha256_transform_fu_295_ctx_state_3_o;
    end else begin
        ctx_state_3_o = ctx_state_3_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_state_3_o_ap_vld = grp_sha256_transform_fu_295_ctx_state_3_o_ap_vld;
    end else begin
        ctx_state_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_4_o_ap_vld)))) begin
        ctx_state_4_o = grp_sha256_transform_fu_295_ctx_state_4_o;
    end else begin
        ctx_state_4_o = ctx_state_4_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_state_4_o_ap_vld = grp_sha256_transform_fu_295_ctx_state_4_o_ap_vld;
    end else begin
        ctx_state_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_5_o_ap_vld)))) begin
        ctx_state_5_o = grp_sha256_transform_fu_295_ctx_state_5_o;
    end else begin
        ctx_state_5_o = ctx_state_5_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_state_5_o_ap_vld = grp_sha256_transform_fu_295_ctx_state_5_o_ap_vld;
    end else begin
        ctx_state_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_6_o_ap_vld)))) begin
        ctx_state_6_o = grp_sha256_transform_fu_295_ctx_state_6_o;
    end else begin
        ctx_state_6_o = ctx_state_6_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_state_6_o_ap_vld = grp_sha256_transform_fu_295_ctx_state_6_o_ap_vld;
    end else begin
        ctx_state_6_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_sha256_transform_fu_295_ctx_state_7_o_ap_vld)))) begin
        ctx_state_7_o = grp_sha256_transform_fu_295_ctx_state_7_o;
    end else begin
        ctx_state_7_o = ctx_state_7_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_state_7_o_ap_vld = grp_sha256_transform_fu_295_ctx_state_7_o_ap_vld;
    end else begin
        ctx_state_7_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        final_hash_address0 = sum1_cast_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        final_hash_address0 = sum8_cast_fu_711_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        final_hash_address0 = i_2_cast2_reg_861;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        final_hash_address0 = sum2_cast_fu_620_p1;
    end else begin
        final_hash_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        final_hash_address1 = sum3_cast_fu_777_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        final_hash_address1 = sum_cast_fu_735_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        final_hash_address1 = sum6_cast_fu_684_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        final_hash_address1 = sum4_cast_fu_648_p1;
    end else begin
        final_hash_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        final_hash_ce0 = 1'b1;
    end else begin
        final_hash_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        final_hash_ce1 = 1'b1;
    end else begin
        final_hash_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        final_hash_d0 = tmp_103_reg_900;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        final_hash_d0 = tmp_101_fu_698_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        final_hash_d0 = tmp_97_fu_662_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        final_hash_d0 = tmp_98_fu_609_p1;
    end else begin
        final_hash_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        final_hash_d1 = tmp_104_reg_905;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        final_hash_d1 = tmp_102_fu_725_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        final_hash_d1 = tmp_100_fu_676_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        final_hash_d1 = tmp_99_fu_635_p1;
    end else begin
        final_hash_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (1'b0 == tmp_78_fu_565_p2)) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        final_hash_we0 = 1'b1;
    end else begin
        final_hash_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (1'b0 == tmp_78_fu_565_p2)) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        final_hash_we1 = 1'b1;
    end else begin
        final_hash_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~(ap_start == 1'b0) & ~(tmp_fu_324_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~(ap_start == 1'b0) & (tmp_fu_324_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == icmp_fu_347_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == grp_sha256_transform_fu_295_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~(tmp_reg_790 == 1'b0) | ~(1'b0 == tmp_s_fu_358_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == exitcond_fu_517_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == grp_sha256_transform_fu_295_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (~(1'b0 == tmp_78_fu_565_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_condition_132 = ((~(tmp_reg_790 == 1'b0) & ~(1'b0 == tmp_67_fu_398_p2)) | (~(1'b0 == tmp_s_fu_358_p2) & ~(1'b0 == tmp_67_fu_398_p2)));
end

always @ (*) begin
    ap_condition_260 = ((~(tmp_reg_790 == 1'b0) & (1'b0 == tmp_67_fu_398_p2)) | (~(1'b0 == tmp_s_fu_358_p2) & (1'b0 == tmp_67_fu_398_p2)));
end

assign exitcond_fu_517_p2 = ((i_0_in_reg_265 == ap_const_lv32_37) ? 1'b1 : 1'b0);

assign grp_sha256_transform_fu_295_ap_start = ap_reg_grp_sha256_transform_fu_295_ap_start;

assign i_1_fu_330_p2 = (i_1_in_reg_245 + ap_const_lv32_1);

assign i_2_cast1_fu_561_p1 = i_2_reg_283;

assign i_2_cast2_fu_557_p1 = i_2_reg_283;

assign i_5_fu_510_p2 = (i_0_in_reg_265 + ap_const_lv32_1);

assign i_6_fu_571_p2 = (i_2_reg_283 + ap_const_lv3_1);

assign icmp_fu_347_p2 = ((tmp_75_fu_337_p4 == ap_const_lv26_0) ? 1'b1 : 1'b0);

assign j_2_fu_364_p2 = (j_reg_254 + ap_const_lv6_1);

assign j_cast5_fu_353_p1 = j_reg_254;

assign sum1_cast7_fu_766_p1 = $signed(sum1_reg_895);

assign sum1_cast_fu_769_p1 = $unsigned(sum1_cast7_fu_766_p1);

assign sum1_fu_640_p3 = {{1'b1}, {i_2_reg_283}};

assign sum2_cast_fu_620_p1 = sum2_fu_614_p2;

assign sum2_fu_614_p2 = (i_2_reg_283 ^ ap_const_lv3_4);

assign sum3_cast6_fu_774_p1 = $signed(sum2_reg_889);

assign sum3_cast_fu_777_p1 = $unsigned(sum3_cast6_fu_774_p1);

assign sum4_cast_fu_648_p1 = sum1_fu_640_p3;

assign sum4_fu_703_p3 = {{ap_const_lv2_2}, {i_2_reg_283}};

assign sum6_cast8_fu_681_p1 = $signed(sum2_reg_889);

assign sum6_cast_fu_684_p1 = $unsigned(sum6_cast8_fu_681_p1);

assign sum8_cast_fu_711_p1 = sum4_fu_703_p3;

assign sum_cast_fu_735_p1 = sum_fu_730_p2;

assign sum_fu_730_p2 = ($signed(ap_const_lv5_14) + $signed(i_2_cast1_reg_866));

assign tmp_100_fu_676_p1 = tmp_86_fu_671_p2[7:0];

assign tmp_101_fu_698_p1 = tmp_88_fu_693_p2[7:0];

assign tmp_102_fu_725_p1 = tmp_90_fu_720_p2[7:0];

assign tmp_103_cast_fu_595_p1 = tmp_80_fu_589_p2;

assign tmp_103_fu_749_p1 = tmp_92_fu_744_p2[7:0];

assign tmp_104_fu_762_p1 = tmp_94_fu_757_p2[7:0];

assign tmp_12_fu_420_p3 = {{tmp_85_fu_377_p1}, {ap_const_lv3_0}};

assign tmp_15_fu_436_p1 = tmp_65_fu_380_p3;

assign tmp_17_fu_444_p1 = tmp_65_fu_380_p3;

assign tmp_65_fu_380_p3 = {{tmp_83_fu_374_p1}, {ap_const_lv3_0}};

assign tmp_66_fu_392_p2 = (tmp_82_cast_fu_388_p1 ^ ap_const_lv32_FFFFFFFF);

assign tmp_67_fu_398_p2 = ((ctx_bitlen_0_i > tmp_66_fu_392_p2) ? 1'b1 : 1'b0);

assign tmp_68_fu_408_p2 = (ctx_bitlen_1_i + ap_const_lv32_1);

assign tmp_69_fu_448_p2 = (tmp_82_cast_fu_388_p1 + ctx_bitlen_0_i);

assign tmp_70_fu_472_p2 = (tmp_87_fu_428_p1 + tmp_12_fu_420_p3);

assign tmp_75_fu_337_p4 = {{i_1_fu_330_p2[ap_const_lv32_1F : ap_const_lv32_6]}};

assign tmp_78_fu_565_p2 = ((i_2_reg_283 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign tmp_79_fu_581_p3 = {{tmp_95_fu_577_p1}, {ap_const_lv3_0}};

assign tmp_80_fu_589_p2 = ($signed(ap_const_lv5_18) - $signed(tmp_79_fu_581_p3));

assign tmp_81_fu_657_p2 = ctx_state_0_i >> tmp_103_cast_reg_879;

assign tmp_82_cast_fu_388_p1 = tmp_65_fu_380_p3;

assign tmp_82_fu_603_p2 = ctx_state_1_i >> tmp_103_cast_fu_595_p1;

assign tmp_83_fu_374_p1 = ctx_datalen[5:0];

assign tmp_84_fu_629_p2 = ctx_state_2_i >> tmp_103_cast_fu_595_p1;

assign tmp_85_fu_377_p1 = ctx_datalen[4:0];

assign tmp_86_cast3_fu_454_p2 = (tmp_91_fu_440_p1 + tmp_17_fu_444_p1);

assign tmp_86_cast_fu_460_p2 = (tmp_89_fu_432_p1 + tmp_15_fu_436_p1);

assign tmp_86_fu_671_p2 = ctx_state_3_i >> tmp_103_cast_reg_879;

assign tmp_87_fu_428_p1 = ctx_bitlen_0_i[7:0];

assign tmp_88_fu_693_p2 = ctx_state_4_i >> tmp_103_cast_reg_879;

assign tmp_89_fu_432_p1 = ctx_bitlen_0_i[15:0];

assign tmp_90_fu_720_p2 = ctx_state_5_i >> tmp_103_cast_reg_879;

assign tmp_91_fu_440_p1 = ctx_bitlen_0_i[23:0];

assign tmp_92_fu_744_p2 = ctx_state_6_i >> tmp_103_cast_reg_879;

assign tmp_93_fu_523_p1 = ctx_bitlen_1_loc_reg_274[7:0];

assign tmp_94_fu_757_p2 = ctx_state_7_i >> tmp_103_cast_reg_879;

assign tmp_95_fu_577_p1 = i_2_reg_283[1:0];

assign tmp_97_fu_662_p1 = tmp_81_fu_657_p2[7:0];

assign tmp_98_fu_609_p1 = tmp_82_fu_603_p2[7:0];

assign tmp_99_fu_635_p1 = tmp_84_fu_629_p2[7:0];

assign tmp_fu_324_p2 = ((ctx_datalen < ap_const_lv32_38) ? 1'b1 : 1'b0);

assign tmp_s_fu_358_p2 = ((j_reg_254 == ap_const_lv6_38) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i_2_cast2_reg_861[31:3] <= 29'b00000000000000000000000000000;
    i_2_cast1_reg_866[4:3] <= 2'b00;
    tmp_103_cast_reg_879[2:0] <= 3'b000;
    tmp_103_cast_reg_879[31:5] <= 27'b000000000000000000000000000;
    sum1_reg_895[3] <= 1'b1;
end

endmodule //sha256_final
