// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256_top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256_top::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256_top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> sha256_top::ap_ST_fsm_state1 = "1";
const sc_lv<6> sha256_top::ap_ST_fsm_state2 = "10";
const sc_lv<6> sha256_top::ap_ST_fsm_state3 = "100";
const sc_lv<6> sha256_top::ap_ST_fsm_state4 = "1000";
const sc_lv<6> sha256_top::ap_ST_fsm_state5 = "10000";
const sc_lv<6> sha256_top::ap_ST_fsm_state6 = "100000";
const sc_lv<32> sha256_top::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> sha256_top::ap_const_lv1_1 = "1";
const sc_lv<32> sha256_top::ap_const_lv32_1 = "1";
const sc_lv<1> sha256_top::ap_const_lv1_0 = "0";
const sc_lv<32> sha256_top::ap_const_lv32_2 = "10";
const sc_lv<6> sha256_top::ap_const_lv6_0 = "000000";
const sc_lv<32> sha256_top::ap_const_lv32_4 = "100";
const sc_lv<32> sha256_top::ap_const_lv32_5 = "101";
const sc_lv<32> sha256_top::ap_const_lv32_3 = "11";
const sc_lv<32> sha256_top::ap_const_lv32_6A09E667 = "1101010000010011110011001100111";
const sc_lv<32> sha256_top::ap_const_lv32_BB67AE85 = "10111011011001111010111010000101";
const sc_lv<32> sha256_top::ap_const_lv32_3C6EF372 = "111100011011101111001101110010";
const sc_lv<32> sha256_top::ap_const_lv32_A54FF53A = "10100101010011111111010100111010";
const sc_lv<32> sha256_top::ap_const_lv32_510E527F = "1010001000011100101001001111111";
const sc_lv<32> sha256_top::ap_const_lv32_9B05688C = "10011011000001010110100010001100";
const sc_lv<32> sha256_top::ap_const_lv32_1F83D9AB = "11111100000111101100110101011";
const sc_lv<32> sha256_top::ap_const_lv32_5BE0CD19 = "1011011111000001100110100011001";
const sc_lv<6> sha256_top::ap_const_lv6_20 = "100000";
const sc_lv<6> sha256_top::ap_const_lv6_1 = "1";
const sc_lv<32> sha256_top::ap_const_lv32_40 = "1000000";
const sc_lv<32> sha256_top::ap_const_lv32_FFFFFDFF = "11111111111111111111110111111111";
const sc_lv<32> sha256_top::ap_const_lv32_200 = "1000000000";

sha256_top::sha256_top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ctx_in_data_U = new sha256_top_ctx_inbkb("ctx_in_data_U");
    ctx_in_data_U->clk(ap_clk);
    ctx_in_data_U->reset(ap_rst);
    ctx_in_data_U->address0(ctx_in_data_address0);
    ctx_in_data_U->ce0(ctx_in_data_ce0);
    ctx_in_data_U->we0(ctx_in_data_we0);
    ctx_in_data_U->d0(ctx_in_data_d0);
    ctx_in_data_U->q0(ctx_in_data_q0);
    ctx_in_data_U->address1(ctx_in_data_address1);
    ctx_in_data_U->ce1(ctx_in_data_ce1);
    ctx_in_data_U->we1(ctx_in_data_we1);
    ctx_in_data_U->d1(grp_sha256_final_fu_112_ctx_in_data_d1);
    ctx_in_data_U->q1(ctx_in_data_q1);
    grp_sha256_final_fu_112 = new sha256_final("grp_sha256_final_fu_112");
    grp_sha256_final_fu_112->ap_clk(ap_clk);
    grp_sha256_final_fu_112->ap_rst(ap_rst);
    grp_sha256_final_fu_112->ap_start(grp_sha256_final_fu_112_ap_start);
    grp_sha256_final_fu_112->ap_done(grp_sha256_final_fu_112_ap_done);
    grp_sha256_final_fu_112->ap_idle(grp_sha256_final_fu_112_ap_idle);
    grp_sha256_final_fu_112->ap_ready(grp_sha256_final_fu_112_ap_ready);
    grp_sha256_final_fu_112->final_hash_address0(grp_sha256_final_fu_112_final_hash_address0);
    grp_sha256_final_fu_112->final_hash_ce0(grp_sha256_final_fu_112_final_hash_ce0);
    grp_sha256_final_fu_112->final_hash_we0(grp_sha256_final_fu_112_final_hash_we0);
    grp_sha256_final_fu_112->final_hash_d0(grp_sha256_final_fu_112_final_hash_d0);
    grp_sha256_final_fu_112->final_hash_address1(grp_sha256_final_fu_112_final_hash_address1);
    grp_sha256_final_fu_112->final_hash_ce1(grp_sha256_final_fu_112_final_hash_ce1);
    grp_sha256_final_fu_112->final_hash_we1(grp_sha256_final_fu_112_final_hash_we1);
    grp_sha256_final_fu_112->final_hash_d1(grp_sha256_final_fu_112_final_hash_d1);
    grp_sha256_final_fu_112->ctx_datalen(ctx_datalen);
    grp_sha256_final_fu_112->ctx_in_data_address0(grp_sha256_final_fu_112_ctx_in_data_address0);
    grp_sha256_final_fu_112->ctx_in_data_ce0(grp_sha256_final_fu_112_ctx_in_data_ce0);
    grp_sha256_final_fu_112->ctx_in_data_we0(grp_sha256_final_fu_112_ctx_in_data_we0);
    grp_sha256_final_fu_112->ctx_in_data_d0(grp_sha256_final_fu_112_ctx_in_data_d0);
    grp_sha256_final_fu_112->ctx_in_data_q0(ctx_in_data_q0);
    grp_sha256_final_fu_112->ctx_in_data_address1(grp_sha256_final_fu_112_ctx_in_data_address1);
    grp_sha256_final_fu_112->ctx_in_data_ce1(grp_sha256_final_fu_112_ctx_in_data_ce1);
    grp_sha256_final_fu_112->ctx_in_data_we1(grp_sha256_final_fu_112_ctx_in_data_we1);
    grp_sha256_final_fu_112->ctx_in_data_d1(grp_sha256_final_fu_112_ctx_in_data_d1);
    grp_sha256_final_fu_112->ctx_in_data_q1(ctx_in_data_q1);
    grp_sha256_final_fu_112->ctx_state_0_i(ctx_state_0);
    grp_sha256_final_fu_112->ctx_state_0_o(grp_sha256_final_fu_112_ctx_state_0_o);
    grp_sha256_final_fu_112->ctx_state_0_o_ap_vld(grp_sha256_final_fu_112_ctx_state_0_o_ap_vld);
    grp_sha256_final_fu_112->ctx_state_1_i(ctx_state_1);
    grp_sha256_final_fu_112->ctx_state_1_o(grp_sha256_final_fu_112_ctx_state_1_o);
    grp_sha256_final_fu_112->ctx_state_1_o_ap_vld(grp_sha256_final_fu_112_ctx_state_1_o_ap_vld);
    grp_sha256_final_fu_112->ctx_state_2_i(ctx_state_2);
    grp_sha256_final_fu_112->ctx_state_2_o(grp_sha256_final_fu_112_ctx_state_2_o);
    grp_sha256_final_fu_112->ctx_state_2_o_ap_vld(grp_sha256_final_fu_112_ctx_state_2_o_ap_vld);
    grp_sha256_final_fu_112->ctx_state_3_i(ctx_state_3);
    grp_sha256_final_fu_112->ctx_state_3_o(grp_sha256_final_fu_112_ctx_state_3_o);
    grp_sha256_final_fu_112->ctx_state_3_o_ap_vld(grp_sha256_final_fu_112_ctx_state_3_o_ap_vld);
    grp_sha256_final_fu_112->ctx_state_4_i(ctx_state_4);
    grp_sha256_final_fu_112->ctx_state_4_o(grp_sha256_final_fu_112_ctx_state_4_o);
    grp_sha256_final_fu_112->ctx_state_4_o_ap_vld(grp_sha256_final_fu_112_ctx_state_4_o_ap_vld);
    grp_sha256_final_fu_112->ctx_state_5_i(ctx_state_5);
    grp_sha256_final_fu_112->ctx_state_5_o(grp_sha256_final_fu_112_ctx_state_5_o);
    grp_sha256_final_fu_112->ctx_state_5_o_ap_vld(grp_sha256_final_fu_112_ctx_state_5_o_ap_vld);
    grp_sha256_final_fu_112->ctx_state_6_i(ctx_state_6);
    grp_sha256_final_fu_112->ctx_state_6_o(grp_sha256_final_fu_112_ctx_state_6_o);
    grp_sha256_final_fu_112->ctx_state_6_o_ap_vld(grp_sha256_final_fu_112_ctx_state_6_o_ap_vld);
    grp_sha256_final_fu_112->ctx_state_7_i(ctx_state_7);
    grp_sha256_final_fu_112->ctx_state_7_o(grp_sha256_final_fu_112_ctx_state_7_o);
    grp_sha256_final_fu_112->ctx_state_7_o_ap_vld(grp_sha256_final_fu_112_ctx_state_7_o_ap_vld);
    grp_sha256_final_fu_112->ctx_bitlen_0_i(ctx_bitlen_0);
    grp_sha256_final_fu_112->ctx_bitlen_0_o(grp_sha256_final_fu_112_ctx_bitlen_0_o);
    grp_sha256_final_fu_112->ctx_bitlen_0_o_ap_vld(grp_sha256_final_fu_112_ctx_bitlen_0_o_ap_vld);
    grp_sha256_final_fu_112->ctx_bitlen_1_i(ctx_bitlen_1);
    grp_sha256_final_fu_112->ctx_bitlen_1_o(grp_sha256_final_fu_112_ctx_bitlen_1_o);
    grp_sha256_final_fu_112->ctx_bitlen_1_o_ap_vld(grp_sha256_final_fu_112_ctx_bitlen_1_o_ap_vld);
    grp_sha256_transform_fu_144 = new sha256_transform("grp_sha256_transform_fu_144");
    grp_sha256_transform_fu_144->ap_clk(ap_clk);
    grp_sha256_transform_fu_144->ap_rst(ap_rst);
    grp_sha256_transform_fu_144->ap_start(grp_sha256_transform_fu_144_ap_start);
    grp_sha256_transform_fu_144->ap_done(grp_sha256_transform_fu_144_ap_done);
    grp_sha256_transform_fu_144->ap_idle(grp_sha256_transform_fu_144_ap_idle);
    grp_sha256_transform_fu_144->ap_ready(grp_sha256_transform_fu_144_ap_ready);
    grp_sha256_transform_fu_144->data_transform_address0(grp_sha256_transform_fu_144_data_transform_address0);
    grp_sha256_transform_fu_144->data_transform_ce0(grp_sha256_transform_fu_144_data_transform_ce0);
    grp_sha256_transform_fu_144->data_transform_q0(ctx_in_data_q0);
    grp_sha256_transform_fu_144->data_transform_address1(grp_sha256_transform_fu_144_data_transform_address1);
    grp_sha256_transform_fu_144->data_transform_ce1(grp_sha256_transform_fu_144_data_transform_ce1);
    grp_sha256_transform_fu_144->data_transform_q1(ctx_in_data_q1);
    grp_sha256_transform_fu_144->ctx_state_0_i(ctx_state_0);
    grp_sha256_transform_fu_144->ctx_state_0_o(grp_sha256_transform_fu_144_ctx_state_0_o);
    grp_sha256_transform_fu_144->ctx_state_0_o_ap_vld(grp_sha256_transform_fu_144_ctx_state_0_o_ap_vld);
    grp_sha256_transform_fu_144->ctx_state_1_i(ctx_state_1);
    grp_sha256_transform_fu_144->ctx_state_1_o(grp_sha256_transform_fu_144_ctx_state_1_o);
    grp_sha256_transform_fu_144->ctx_state_1_o_ap_vld(grp_sha256_transform_fu_144_ctx_state_1_o_ap_vld);
    grp_sha256_transform_fu_144->ctx_state_2_i(ctx_state_2);
    grp_sha256_transform_fu_144->ctx_state_2_o(grp_sha256_transform_fu_144_ctx_state_2_o);
    grp_sha256_transform_fu_144->ctx_state_2_o_ap_vld(grp_sha256_transform_fu_144_ctx_state_2_o_ap_vld);
    grp_sha256_transform_fu_144->ctx_state_3_i(ctx_state_3);
    grp_sha256_transform_fu_144->ctx_state_3_o(grp_sha256_transform_fu_144_ctx_state_3_o);
    grp_sha256_transform_fu_144->ctx_state_3_o_ap_vld(grp_sha256_transform_fu_144_ctx_state_3_o_ap_vld);
    grp_sha256_transform_fu_144->ctx_state_4_i(ctx_state_4);
    grp_sha256_transform_fu_144->ctx_state_4_o(grp_sha256_transform_fu_144_ctx_state_4_o);
    grp_sha256_transform_fu_144->ctx_state_4_o_ap_vld(grp_sha256_transform_fu_144_ctx_state_4_o_ap_vld);
    grp_sha256_transform_fu_144->ctx_state_5_i(ctx_state_5);
    grp_sha256_transform_fu_144->ctx_state_5_o(grp_sha256_transform_fu_144_ctx_state_5_o);
    grp_sha256_transform_fu_144->ctx_state_5_o_ap_vld(grp_sha256_transform_fu_144_ctx_state_5_o_ap_vld);
    grp_sha256_transform_fu_144->ctx_state_6_i(ctx_state_6);
    grp_sha256_transform_fu_144->ctx_state_6_o(grp_sha256_transform_fu_144_ctx_state_6_o);
    grp_sha256_transform_fu_144->ctx_state_6_o_ap_vld(grp_sha256_transform_fu_144_ctx_state_6_o_ap_vld);
    grp_sha256_transform_fu_144->ctx_state_7_i(ctx_state_7);
    grp_sha256_transform_fu_144->ctx_state_7_o(grp_sha256_transform_fu_144_ctx_state_7_o);
    grp_sha256_transform_fu_144->ctx_state_7_o_ap_vld(grp_sha256_transform_fu_144_ctx_state_7_o_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_sha256_final_fu_112_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_sha256_final_fu_112_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_datalen_assign_i_fu_256_p2);
    sensitive << ( ctx_datalen );

    SC_METHOD(thread_ctx_in_data_address0);
    sensitive << ( ctx_datalen );
    sensitive << ( tmp_1_i_reg_325 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_sha256_final_fu_112_ctx_in_data_address0 );
    sensitive << ( grp_sha256_transform_fu_144_data_transform_address0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_in_data_address1);
    sensitive << ( tmp_1_i_reg_325 );
    sensitive << ( grp_sha256_final_fu_112_ctx_in_data_address1 );
    sensitive << ( grp_sha256_transform_fu_144_data_transform_address1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_in_data_ce0);
    sensitive << ( tmp_1_i_reg_325 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_sha256_final_fu_112_ctx_in_data_ce0 );
    sensitive << ( grp_sha256_transform_fu_144_data_transform_ce0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_in_data_ce1);
    sensitive << ( tmp_1_i_reg_325 );
    sensitive << ( grp_sha256_final_fu_112_ctx_in_data_ce1 );
    sensitive << ( grp_sha256_transform_fu_144_data_transform_ce1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_in_data_d0);
    sensitive << ( data_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_sha256_final_fu_112_ctx_in_data_d0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_in_data_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_sha256_final_fu_112_ctx_in_data_we0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_in_data_we1);
    sensitive << ( grp_sha256_final_fu_112_ctx_in_data_we1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_data_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_i_cast1_fu_234_p1 );

    SC_METHOD(thread_data_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_exitcond_i_fu_239_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_i_reg_101 );

    SC_METHOD(thread_grp_sha256_final_fu_112_ap_start);
    sensitive << ( ap_reg_grp_sha256_final_fu_112_ap_start );

    SC_METHOD(thread_grp_sha256_transform_fu_144_ap_start);
    sensitive << ( ap_reg_grp_sha256_transform_fu_144_ap_start );

    SC_METHOD(thread_hash_address0);
    sensitive << ( grp_sha256_final_fu_112_final_hash_address0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_address1);
    sensitive << ( grp_sha256_final_fu_112_final_hash_address1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_ce0);
    sensitive << ( grp_sha256_final_fu_112_final_hash_ce0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_ce1);
    sensitive << ( grp_sha256_final_fu_112_final_hash_ce1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_d0);
    sensitive << ( grp_sha256_final_fu_112_final_hash_d0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_d1);
    sensitive << ( grp_sha256_final_fu_112_final_hash_d1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_we0);
    sensitive << ( grp_sha256_final_fu_112_final_hash_we0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_hash_we1);
    sensitive << ( grp_sha256_final_fu_112_final_hash_we1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_i_fu_245_p2);
    sensitive << ( i_i_reg_101 );

    SC_METHOD(thread_i_i_cast1_fu_234_p1);
    sensitive << ( i_i_reg_101 );

    SC_METHOD(thread_tmp_1_i_fu_268_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ctx_datalen_assign_i_fu_256_p2 );

    SC_METHOD(thread_tmp_2_i_fu_278_p2);
    sensitive << ( ctx_bitlen_0 );
    sensitive << ( tmp_1_i_reg_325 );
    sensitive << ( grp_sha256_transform_fu_144_ap_done );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_3_i_fu_288_p2);
    sensitive << ( ctx_bitlen_1 );

    SC_METHOD(thread_tmp_4_i_fu_300_p2);
    sensitive << ( ctx_bitlen_0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_239_p2 );
    sensitive << ( tmp_1_i_fu_268_p2 );
    sensitive << ( tmp_1_i_reg_325 );
    sensitive << ( grp_sha256_final_fu_112_ap_done );
    sensitive << ( grp_sha256_transform_fu_144_ap_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    ctx_datalen = "00000000000000000000000000000000";
    ctx_bitlen_0 = "00000000000000000000000000000000";
    ctx_bitlen_1 = "00000000000000000000000000000000";
    ctx_state_0 = "00000000000000000000000000000000";
    ctx_state_1 = "00000000000000000000000000000000";
    ctx_state_2 = "00000000000000000000000000000000";
    ctx_state_3 = "00000000000000000000000000000000";
    ctx_state_4 = "00000000000000000000000000000000";
    ctx_state_5 = "00000000000000000000000000000000";
    ctx_state_6 = "00000000000000000000000000000000";
    ctx_state_7 = "00000000000000000000000000000000";
    ap_reg_grp_sha256_final_fu_112_ap_start = SC_LOGIC_0;
    ap_reg_grp_sha256_transform_fu_144_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_address0, "(port)data_address0");
    sc_trace(mVcdFile, data_ce0, "(port)data_ce0");
    sc_trace(mVcdFile, data_q0, "(port)data_q0");
    sc_trace(mVcdFile, hash_address0, "(port)hash_address0");
    sc_trace(mVcdFile, hash_ce0, "(port)hash_ce0");
    sc_trace(mVcdFile, hash_we0, "(port)hash_we0");
    sc_trace(mVcdFile, hash_d0, "(port)hash_d0");
    sc_trace(mVcdFile, hash_address1, "(port)hash_address1");
    sc_trace(mVcdFile, hash_ce1, "(port)hash_ce1");
    sc_trace(mVcdFile, hash_we1, "(port)hash_we1");
    sc_trace(mVcdFile, hash_d1, "(port)hash_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ctx_datalen, "ctx_datalen");
    sc_trace(mVcdFile, ctx_bitlen_0, "ctx_bitlen_0");
    sc_trace(mVcdFile, ctx_bitlen_1, "ctx_bitlen_1");
    sc_trace(mVcdFile, ctx_state_0, "ctx_state_0");
    sc_trace(mVcdFile, ctx_state_1, "ctx_state_1");
    sc_trace(mVcdFile, ctx_state_2, "ctx_state_2");
    sc_trace(mVcdFile, ctx_state_3, "ctx_state_3");
    sc_trace(mVcdFile, ctx_state_4, "ctx_state_4");
    sc_trace(mVcdFile, ctx_state_5, "ctx_state_5");
    sc_trace(mVcdFile, ctx_state_6, "ctx_state_6");
    sc_trace(mVcdFile, ctx_state_7, "ctx_state_7");
    sc_trace(mVcdFile, ctx_in_data_address0, "ctx_in_data_address0");
    sc_trace(mVcdFile, ctx_in_data_ce0, "ctx_in_data_ce0");
    sc_trace(mVcdFile, ctx_in_data_we0, "ctx_in_data_we0");
    sc_trace(mVcdFile, ctx_in_data_d0, "ctx_in_data_d0");
    sc_trace(mVcdFile, ctx_in_data_q0, "ctx_in_data_q0");
    sc_trace(mVcdFile, ctx_in_data_address1, "ctx_in_data_address1");
    sc_trace(mVcdFile, ctx_in_data_ce1, "ctx_in_data_ce1");
    sc_trace(mVcdFile, ctx_in_data_we1, "ctx_in_data_we1");
    sc_trace(mVcdFile, ctx_in_data_q1, "ctx_in_data_q1");
    sc_trace(mVcdFile, i_fu_245_p2, "i_fu_245_p2");
    sc_trace(mVcdFile, i_reg_315, "i_reg_315");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_i_fu_239_p2, "exitcond_i_fu_239_p2");
    sc_trace(mVcdFile, tmp_1_i_fu_268_p2, "tmp_1_i_fu_268_p2");
    sc_trace(mVcdFile, tmp_1_i_reg_325, "tmp_1_i_reg_325");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ap_start, "grp_sha256_final_fu_112_ap_start");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ap_done, "grp_sha256_final_fu_112_ap_done");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ap_idle, "grp_sha256_final_fu_112_ap_idle");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ap_ready, "grp_sha256_final_fu_112_ap_ready");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_final_hash_address0, "grp_sha256_final_fu_112_final_hash_address0");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_final_hash_ce0, "grp_sha256_final_fu_112_final_hash_ce0");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_final_hash_we0, "grp_sha256_final_fu_112_final_hash_we0");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_final_hash_d0, "grp_sha256_final_fu_112_final_hash_d0");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_final_hash_address1, "grp_sha256_final_fu_112_final_hash_address1");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_final_hash_ce1, "grp_sha256_final_fu_112_final_hash_ce1");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_final_hash_we1, "grp_sha256_final_fu_112_final_hash_we1");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_final_hash_d1, "grp_sha256_final_fu_112_final_hash_d1");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_in_data_address0, "grp_sha256_final_fu_112_ctx_in_data_address0");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_in_data_ce0, "grp_sha256_final_fu_112_ctx_in_data_ce0");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_in_data_we0, "grp_sha256_final_fu_112_ctx_in_data_we0");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_in_data_d0, "grp_sha256_final_fu_112_ctx_in_data_d0");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_in_data_address1, "grp_sha256_final_fu_112_ctx_in_data_address1");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_in_data_ce1, "grp_sha256_final_fu_112_ctx_in_data_ce1");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_in_data_we1, "grp_sha256_final_fu_112_ctx_in_data_we1");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_in_data_d1, "grp_sha256_final_fu_112_ctx_in_data_d1");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_0_o, "grp_sha256_final_fu_112_ctx_state_0_o");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_0_o_ap_vld, "grp_sha256_final_fu_112_ctx_state_0_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_1_o, "grp_sha256_final_fu_112_ctx_state_1_o");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_1_o_ap_vld, "grp_sha256_final_fu_112_ctx_state_1_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_2_o, "grp_sha256_final_fu_112_ctx_state_2_o");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_2_o_ap_vld, "grp_sha256_final_fu_112_ctx_state_2_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_3_o, "grp_sha256_final_fu_112_ctx_state_3_o");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_3_o_ap_vld, "grp_sha256_final_fu_112_ctx_state_3_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_4_o, "grp_sha256_final_fu_112_ctx_state_4_o");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_4_o_ap_vld, "grp_sha256_final_fu_112_ctx_state_4_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_5_o, "grp_sha256_final_fu_112_ctx_state_5_o");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_5_o_ap_vld, "grp_sha256_final_fu_112_ctx_state_5_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_6_o, "grp_sha256_final_fu_112_ctx_state_6_o");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_6_o_ap_vld, "grp_sha256_final_fu_112_ctx_state_6_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_7_o, "grp_sha256_final_fu_112_ctx_state_7_o");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_state_7_o_ap_vld, "grp_sha256_final_fu_112_ctx_state_7_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_bitlen_0_o, "grp_sha256_final_fu_112_ctx_bitlen_0_o");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_bitlen_0_o_ap_vld, "grp_sha256_final_fu_112_ctx_bitlen_0_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_bitlen_1_o, "grp_sha256_final_fu_112_ctx_bitlen_1_o");
    sc_trace(mVcdFile, grp_sha256_final_fu_112_ctx_bitlen_1_o_ap_vld, "grp_sha256_final_fu_112_ctx_bitlen_1_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ap_start, "grp_sha256_transform_fu_144_ap_start");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ap_done, "grp_sha256_transform_fu_144_ap_done");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ap_idle, "grp_sha256_transform_fu_144_ap_idle");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ap_ready, "grp_sha256_transform_fu_144_ap_ready");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_data_transform_address0, "grp_sha256_transform_fu_144_data_transform_address0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_data_transform_ce0, "grp_sha256_transform_fu_144_data_transform_ce0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_data_transform_address1, "grp_sha256_transform_fu_144_data_transform_address1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_data_transform_ce1, "grp_sha256_transform_fu_144_data_transform_ce1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_0_o, "grp_sha256_transform_fu_144_ctx_state_0_o");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_0_o_ap_vld, "grp_sha256_transform_fu_144_ctx_state_0_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_1_o, "grp_sha256_transform_fu_144_ctx_state_1_o");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_1_o_ap_vld, "grp_sha256_transform_fu_144_ctx_state_1_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_2_o, "grp_sha256_transform_fu_144_ctx_state_2_o");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_2_o_ap_vld, "grp_sha256_transform_fu_144_ctx_state_2_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_3_o, "grp_sha256_transform_fu_144_ctx_state_3_o");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_3_o_ap_vld, "grp_sha256_transform_fu_144_ctx_state_3_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_4_o, "grp_sha256_transform_fu_144_ctx_state_4_o");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_4_o_ap_vld, "grp_sha256_transform_fu_144_ctx_state_4_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_5_o, "grp_sha256_transform_fu_144_ctx_state_5_o");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_5_o_ap_vld, "grp_sha256_transform_fu_144_ctx_state_5_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_6_o, "grp_sha256_transform_fu_144_ctx_state_6_o");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_6_o_ap_vld, "grp_sha256_transform_fu_144_ctx_state_6_o_ap_vld");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_7_o, "grp_sha256_transform_fu_144_ctx_state_7_o");
    sc_trace(mVcdFile, grp_sha256_transform_fu_144_ctx_state_7_o_ap_vld, "grp_sha256_transform_fu_144_ctx_state_7_o_ap_vld");
    sc_trace(mVcdFile, i_i_reg_101, "i_i_reg_101");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_reg_grp_sha256_final_fu_112_ap_start, "ap_reg_grp_sha256_final_fu_112_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_reg_grp_sha256_transform_fu_144_ap_start, "ap_reg_grp_sha256_transform_fu_144_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_i_cast1_fu_234_p1, "i_i_cast1_fu_234_p1");
    sc_trace(mVcdFile, ctx_datalen_assign_i_fu_256_p2, "ctx_datalen_assign_i_fu_256_p2");
    sc_trace(mVcdFile, tmp_4_i_fu_300_p2, "tmp_4_i_fu_300_p2");
    sc_trace(mVcdFile, tmp_3_i_fu_288_p2, "tmp_3_i_fu_288_p2");
    sc_trace(mVcdFile, tmp_2_i_fu_278_p2, "tmp_2_i_fu_278_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sha256_top.hdltvin.dat");
    mHdltvoutHandle.open("sha256_top.hdltvout.dat");
}

sha256_top::~sha256_top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete ctx_in_data_U;
    delete grp_sha256_final_fu_112;
    delete grp_sha256_transform_fu_144;
}

void sha256_top::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_sha256_final_fu_112_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
             !esl_seteq<1,1,1>(exitcond_i_fu_239_p2.read(), ap_const_lv1_0))) {
            ap_reg_grp_sha256_final_fu_112_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_112_ap_ready.read())) {
            ap_reg_grp_sha256_final_fu_112_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_sha256_transform_fu_144_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
            ap_reg_grp_sha256_transform_fu_144_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_144_ap_ready.read())) {
            ap_reg_grp_sha256_transform_fu_144_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && 
         !(!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_transform_fu_144_ap_done.read())))) {
        ctx_bitlen_0 = tmp_4_i_fu_300_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ctx_bitlen_0 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_112_ctx_bitlen_0_o_ap_vld.read()))) {
        ctx_bitlen_0 = grp_sha256_final_fu_112_ctx_bitlen_0_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && 
         !(!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_transform_fu_144_ap_done.read())) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_i_fu_278_p2.read()))) {
        ctx_bitlen_1 = tmp_3_i_fu_288_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ctx_bitlen_1 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_112_ctx_bitlen_1_o_ap_vld.read()))) {
        ctx_bitlen_1 = grp_sha256_final_fu_112_ctx_bitlen_1_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_datalen = ctx_datalen_assign_i_fu_256_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && 
                 !(!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_transform_fu_144_ap_done.read()))))) {
        ctx_datalen = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ctx_state_0 = ap_const_lv32_6A09E667;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_144_ctx_state_0_o_ap_vld.read()))) {
        ctx_state_0 = grp_sha256_transform_fu_144_ctx_state_0_o.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_112_ctx_state_0_o_ap_vld.read()))) {
        ctx_state_0 = grp_sha256_final_fu_112_ctx_state_0_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ctx_state_1 = ap_const_lv32_BB67AE85;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_144_ctx_state_1_o_ap_vld.read()))) {
        ctx_state_1 = grp_sha256_transform_fu_144_ctx_state_1_o.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_112_ctx_state_1_o_ap_vld.read()))) {
        ctx_state_1 = grp_sha256_final_fu_112_ctx_state_1_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ctx_state_2 = ap_const_lv32_3C6EF372;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_144_ctx_state_2_o_ap_vld.read()))) {
        ctx_state_2 = grp_sha256_transform_fu_144_ctx_state_2_o.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_112_ctx_state_2_o_ap_vld.read()))) {
        ctx_state_2 = grp_sha256_final_fu_112_ctx_state_2_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ctx_state_3 = ap_const_lv32_A54FF53A;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_144_ctx_state_3_o_ap_vld.read()))) {
        ctx_state_3 = grp_sha256_transform_fu_144_ctx_state_3_o.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_112_ctx_state_3_o_ap_vld.read()))) {
        ctx_state_3 = grp_sha256_final_fu_112_ctx_state_3_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ctx_state_4 = ap_const_lv32_510E527F;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_144_ctx_state_4_o_ap_vld.read()))) {
        ctx_state_4 = grp_sha256_transform_fu_144_ctx_state_4_o.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_112_ctx_state_4_o_ap_vld.read()))) {
        ctx_state_4 = grp_sha256_final_fu_112_ctx_state_4_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ctx_state_5 = ap_const_lv32_9B05688C;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_144_ctx_state_5_o_ap_vld.read()))) {
        ctx_state_5 = grp_sha256_transform_fu_144_ctx_state_5_o.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_112_ctx_state_5_o_ap_vld.read()))) {
        ctx_state_5 = grp_sha256_final_fu_112_ctx_state_5_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ctx_state_6 = ap_const_lv32_1F83D9AB;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_144_ctx_state_6_o_ap_vld.read()))) {
        ctx_state_6 = grp_sha256_transform_fu_144_ctx_state_6_o.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_112_ctx_state_6_o_ap_vld.read()))) {
        ctx_state_6 = grp_sha256_final_fu_112_ctx_state_6_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ctx_state_7 = ap_const_lv32_5BE0CD19;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_144_ctx_state_7_o_ap_vld.read()))) {
        ctx_state_7 = grp_sha256_transform_fu_144_ctx_state_7_o.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_112_ctx_state_7_o_ap_vld.read()))) {
        ctx_state_7 = grp_sha256_final_fu_112_ctx_state_7_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
         !(!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_transform_fu_144_ap_done.read())))) {
        i_i_reg_101 = i_reg_315.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_i_reg_101 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        i_reg_315 = i_fu_245_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        tmp_1_i_reg_325 = tmp_1_i_fu_268_p2.read();
    }
}

void sha256_top::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void sha256_top::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void sha256_top::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void sha256_top::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void sha256_top::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void sha256_top::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void sha256_top::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
         !esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_final_fu_112_ap_done.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256_top::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256_top::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
         !esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_final_fu_112_ap_done.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256_top::thread_ctx_datalen_assign_i_fu_256_p2() {
    ctx_datalen_assign_i_fu_256_p2 = (!ctx_datalen.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ctx_datalen.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_top::thread_ctx_in_data_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_in_data_address0 =  (sc_lv<6>) (ctx_datalen.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()))) {
        ctx_in_data_address0 = grp_sha256_transform_fu_144_data_transform_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        ctx_in_data_address0 = grp_sha256_final_fu_112_ctx_in_data_address0.read();
    } else {
        ctx_in_data_address0 = "XXXXXX";
    }
}

void sha256_top::thread_ctx_in_data_address1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()))) {
        ctx_in_data_address1 = grp_sha256_transform_fu_144_data_transform_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        ctx_in_data_address1 = grp_sha256_final_fu_112_ctx_in_data_address1.read();
    } else {
        ctx_in_data_address1 = "XXXXXX";
    }
}

void sha256_top::thread_ctx_in_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_in_data_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()))) {
        ctx_in_data_ce0 = grp_sha256_transform_fu_144_data_transform_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        ctx_in_data_ce0 = grp_sha256_final_fu_112_ctx_in_data_ce0.read();
    } else {
        ctx_in_data_ce0 = ap_const_logic_0;
    }
}

void sha256_top::thread_ctx_in_data_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()))) {
        ctx_in_data_ce1 = grp_sha256_transform_fu_144_data_transform_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        ctx_in_data_ce1 = grp_sha256_final_fu_112_ctx_in_data_ce1.read();
    } else {
        ctx_in_data_ce1 = ap_const_logic_0;
    }
}

void sha256_top::thread_ctx_in_data_d0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ctx_in_data_d0 = data_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        ctx_in_data_d0 = grp_sha256_final_fu_112_ctx_in_data_d0.read();
    } else {
        ctx_in_data_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256_top::thread_ctx_in_data_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())))) {
        ctx_in_data_we0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        ctx_in_data_we0 = grp_sha256_final_fu_112_ctx_in_data_we0.read();
    } else {
        ctx_in_data_we0 = ap_const_logic_0;
    }
}

void sha256_top::thread_ctx_in_data_we1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        ctx_in_data_we1 = grp_sha256_final_fu_112_ctx_in_data_we1.read();
    } else {
        ctx_in_data_we1 = ap_const_logic_0;
    }
}

void sha256_top::thread_data_address0() {
    data_address0 =  (sc_lv<5>) (i_i_cast1_fu_234_p1.read());
}

void sha256_top::thread_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        data_ce0 = ap_const_logic_1;
    } else {
        data_ce0 = ap_const_logic_0;
    }
}

void sha256_top::thread_exitcond_i_fu_239_p2() {
    exitcond_i_fu_239_p2 = (!i_i_reg_101.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_101.read() == ap_const_lv6_20);
}

void sha256_top::thread_grp_sha256_final_fu_112_ap_start() {
    grp_sha256_final_fu_112_ap_start = ap_reg_grp_sha256_final_fu_112_ap_start.read();
}

void sha256_top::thread_grp_sha256_transform_fu_144_ap_start() {
    grp_sha256_transform_fu_144_ap_start = ap_reg_grp_sha256_transform_fu_144_ap_start.read();
}

void sha256_top::thread_hash_address0() {
    hash_address0 = grp_sha256_final_fu_112_final_hash_address0.read();
}

void sha256_top::thread_hash_address1() {
    hash_address1 = grp_sha256_final_fu_112_final_hash_address1.read();
}

void sha256_top::thread_hash_ce0() {
    hash_ce0 = grp_sha256_final_fu_112_final_hash_ce0.read();
}

void sha256_top::thread_hash_ce1() {
    hash_ce1 = grp_sha256_final_fu_112_final_hash_ce1.read();
}

void sha256_top::thread_hash_d0() {
    hash_d0 = grp_sha256_final_fu_112_final_hash_d0.read();
}

void sha256_top::thread_hash_d1() {
    hash_d1 = grp_sha256_final_fu_112_final_hash_d1.read();
}

void sha256_top::thread_hash_we0() {
    hash_we0 = grp_sha256_final_fu_112_final_hash_we0.read();
}

void sha256_top::thread_hash_we1() {
    hash_we1 = grp_sha256_final_fu_112_final_hash_we1.read();
}

void sha256_top::thread_i_fu_245_p2() {
    i_fu_245_p2 = (!i_i_reg_101.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_i_reg_101.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void sha256_top::thread_i_i_cast1_fu_234_p1() {
    i_i_cast1_fu_234_p1 = esl_zext<32,6>(i_i_reg_101.read());
}

void sha256_top::thread_tmp_1_i_fu_268_p2() {
    tmp_1_i_fu_268_p2 = (!ctx_datalen_assign_i_fu_256_p2.read().is_01() || !ap_const_lv32_40.is_01())? sc_lv<1>(): sc_lv<1>(ctx_datalen_assign_i_fu_256_p2.read() == ap_const_lv32_40);
}

void sha256_top::thread_tmp_2_i_fu_278_p2() {
    tmp_2_i_fu_278_p2 = (!ctx_bitlen_0.read().is_01() || !ap_const_lv32_FFFFFDFF.is_01())? sc_lv<1>(): (sc_biguint<32>(ctx_bitlen_0.read()) > sc_biguint<32>(ap_const_lv32_FFFFFDFF));
}

void sha256_top::thread_tmp_3_i_fu_288_p2() {
    tmp_3_i_fu_288_p2 = (!ctx_bitlen_1.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ctx_bitlen_1.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_top::thread_tmp_4_i_fu_300_p2() {
    tmp_4_i_fu_300_p2 = (!ctx_bitlen_0.read().is_01() || !ap_const_lv32_200.is_01())? sc_lv<32>(): (sc_biguint<32>(ctx_bitlen_0.read()) + sc_biguint<32>(ap_const_lv32_200));
}

void sha256_top::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_i_fu_239_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_fu_268_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if (!(!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_325.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_transform_fu_144_ap_done.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_final_fu_112_ap_done.read())) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void sha256_top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_address0\" :  \"" << data_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_ce0\" :  \"" << data_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_q0\" :  \"" << data_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_address0\" :  \"" << hash_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_ce0\" :  \"" << hash_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_we0\" :  \"" << hash_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_d0\" :  \"" << hash_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_address1\" :  \"" << hash_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_ce1\" :  \"" << hash_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_we1\" :  \"" << hash_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"hash_d1\" :  \"" << hash_d1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

